[["index.html", "AlberdiLab | Hernandez et al. 2024 Contrasting recovery of metagenome‑assembled genomes and derived microbial communities from lizard fecal and cloacal samples Chapter 1 Introduction 1.1 Prepare the R environment", " AlberdiLab | Hernandez et al. 2024 Contrasting recovery of metagenome‑assembled genomes and derived microbial communities from lizard fecal and cloacal samples Mauricio Hernandez1 Jorge Langa2 Ostaizka Aizpurua3 Yendi E. Navarro-Noya4 Antton Alberdi5 2024-03-12 Chapter 1 Introduction This webbook contains all the code used for data analysis in study on the recovery of metagenome‑assembled genomes and derived microbial communities from lizard fecal and cloacal samples. 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/alberdilab/lizard_sample_types.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) # For tree handling library(ape) library(phyloseq) library(phytools) # For plotting library(ggplot2) library(ggrepel) library(ggpubr) library(ggnewscale) library(gridExtra) library(ggtreeExtra) library(ggtree) library(ggh4x) # For statistics library(spaa) library(vegan) library(Rtsne) library(geiger) library(hilldiv2) library(distillR) library(ANCOMBC) library(lme4) Universidad Nacional Autónoma de Honduras, delmer.hernandez@unah.edu.hn↩︎ University of Copenhagen, jorge.langa@sund.ku.dk↩︎ University of Copenhagen, ostaizka.aizpurua@sund.ku.dk↩︎ Universidad Autónoma de Tlaxcala, yendiebenezer.navarro.n@uatx.mx↩︎ University of Copenhagen, antton.alberdi@sund.ku.dk↩︎ "],["prepare-data.html", "Chapter 2 Prepare data 2.1 Load data 2.2 Create working objects 2.3 Load data statistics 2.4 Prepare color scheme 2.5 Wrap working objects", " Chapter 2 Prepare data 2.1 Load data Load the original data files outputted by the bioinformatic pipeline. 2.1.1 Sample metadata sample_metadata &lt;- read_tsv(&quot;resources/metadata.tsv&quot;) 2.1.2 Read counts read_counts &lt;- read_tsv(&quot;resources/coverm/genome.count.tsv.xz&quot;) %&gt;% rename(genome=1) 2.1.3 Genome base hits genome_hits &lt;- read_tsv(&quot;resources/coverm/genome.covered_bases.tsv.xz&quot;) %&gt;% rename(genome=1) 2.1.4 Genome taxonomy genome_taxonomy &lt;- read_tsv(&quot;resources/gtdbtk/gtdbtk.summary.tsv.xz&quot;) %&gt;% select(mag_id = user_genome, classification) %&gt;% separate( classification, into = c(&quot;domain&quot;, &quot;phylum&quot;, &quot;class&quot;, &quot;order&quot;, &quot;family&quot;, &quot;genus&quot;, &quot;species&quot;), sep = &quot;;&quot;) %&gt;% rename(genome=1) 2.1.5 Genome quality genome_quality &lt;- read_tsv(&quot;resources/checkm2/quality_report.tsv.xz&quot;) %&gt;% select( genome = Name, completeness = Completeness, contamination = Contamination, length = Genome_Size, gc = GC_Content ) 2.1.6 Genome tree genome_tree &lt;- read_tree(&quot;resources/gtdbtk/gtdbtk.backbone.bac120.classify.tree&quot;) genome_tree$tip.label &lt;- str_replace_all(genome_tree$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names genome_tree &lt;- keep.tip(genome_tree, tip=genome_taxonomy$genome) # keep only MAG tips 2.1.7 Genome annotations genome_annotations &lt;- read_tsv(&quot;resources/dram/annotations.tsv.xz&quot;) %&gt;% rename(gene=1, genome=2, contig=3) 2.2 Create working objects Transform the original data files into working objects for downstream analyses. 2.2.1 Merge genome taxonomy and quality genome_metadata &lt;- genome_taxonomy %&gt;% left_join(genome_quality,by=join_by(genome==genome)) #join quality 2.2.2 Calculate genome coverage genome_coverage &lt;- genome_hits %&gt;% mutate(across(where(is.numeric), ~ ./genome_metadata$length)) 2.2.3 Filter reads by coverage min_coverage=0.3 read_counts_filt &lt;- genome_coverage %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts[[cur_column()]])) 2.2.4 Transform reads into genome counts readlength=150 genome_counts &lt;- read_counts %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) readlength=150 genome_counts_filt &lt;- read_counts_filt %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) 2.2.5 Distill annotations into GIFTs genome_gifts &lt;- distill(genome_annotations,GIFT_db,genomecol=2,annotcol=c(9,10,19), verbosity=F) 2.3 Load data statistics 2.3.1 Raw reads raw_reads &lt;- &quot;resources/report/by_step/reads_data/multiqc_general_stats.txt.xz&quot; %&gt;% read_tsv() %&gt;% select( sample = Sample, raw_reads = `FastQC_mqc-generalstats-fastqc-total_sequences` ) %&gt;% mutate( sample = sample %&gt;% str_remove_all(&quot;_1$&quot;) %&gt;% str_remove_all(&quot;_2$&quot;) ) %&gt;% summarise(raw_reads = sum(raw_reads), .by = sample) 2.3.2 Quality-filtered reads fastp_reads &lt;- &quot;resources/report/by_step/preprocessing_data/multiqc_general_stats.txt.xz&quot; %&gt;% read_tsv() %&gt;% filter(str_detect(Sample, &quot;fastp&quot;)) %&gt;% select( sample = Sample, trimmed_reads = `FastQC_mqc-generalstats-fastqc-total_sequences` ) %&gt;% mutate( sample = sample %&gt;% str_remove_all(&quot;_[u12]+$&quot;) %&gt;% str_remove_all(&quot;^fastp \\\\| &quot;) ) %&gt;% summarise(trimmed_reads = sum(trimmed_reads), .by = sample) 2.3.3 Host-mapped reads host_mapped &lt;- &quot;resources/report/by_step/preprocessing_data/multiqc_general_stats.txt.xz&quot; %&gt;% read_tsv() %&gt;% filter(!str_detect(Sample, &quot;fastp&quot;)) %&gt;% select( sample = Sample, host_mapped = `Samtools_mqc-generalstats-samtools-reads_mapped`, mapping_total = `Samtools_mqc-generalstats-samtools-raw_total_sequences` ) %&gt;% mutate( host_unmapped = mapping_total - host_mapped ) %&gt;% filter(!is.na(host_mapped)) %&gt;% separate( col = sample, into = c(&quot;host_name&quot;, &quot;sample&quot;), sep = &quot; \\\\| &quot; ) %&gt;% rename(mapped = host_mapped, unmapped = host_unmapped) %&gt;% select(-mapping_total) %&gt;% pivot_longer(-host_name:-sample) %&gt;% mutate( name = str_glue(&quot;{name}_{host_name}&quot;) ) %&gt;% select(-host_name) %&gt;% pivot_wider() 2.3.4 Prokaryotic fraction singlem &lt;- &quot;resources/singlem/microbial_fraction.tsv.xz&quot; %&gt;% read_tsv() %&gt;% distinct() %&gt;% mutate( sample = sample %&gt;% str_remove_all(&quot;_1$&quot;), read_fraction = read_fraction %&gt;% str_remove(&quot;%&quot;) %&gt;% as.numeric(), read_fraction = read_fraction / 100 ) %&gt;% select( sample, singlem_prokaryotic_bases = bacterial_archaeal_bases, singlem_metagenome_size = metagenome_size, singlem_read_fraction = read_fraction, ) 2.3.5 Metagenomic complexity nonpareil &lt;- &quot;resources/nonpareil/nonpareil.tsv.xz&quot; %&gt;% read_tsv() %&gt;% select(sample=sample_id, nonpareil_c = C, nonpareil_diversity = diversity) 2.3.6 MAG-mapped reads mag_mapping &lt;- &quot;resources/coverm/contig.count.tsv.xz&quot; %&gt;% read_tsv() %&gt;% pivot_longer(-sequence_id) %&gt;% summarise(value = sum(value), .by = &quot;name&quot;) %&gt;% rename(sample = name, mapped_mags = value) 2.3.7 Wrap data statistics data_stats &lt;- raw_reads %&gt;% left_join(fastp_reads) %&gt;% left_join(host_mapped) %&gt;% left_join(singlem) %&gt;% left_join(nonpareil) %&gt;% left_join(mag_mapping) 2.4 Prepare color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% select(colors) %&gt;% pull() 2.5 Wrap working objects All working objects are wrapped into a single Rdata object to facilitate downstream usage. save(sample_metadata, genome_metadata, read_counts, genome_counts, genome_counts_filt, genome_tree, genome_gifts, phylum_colors, data_stats, file = &quot;resources/data.Rdata&quot;) "],["data-statistics.html", "Chapter 3 Data statistics 3.1 Sequencing reads statistics 3.2 DNA fractions 3.3 Recovered microbial fraction", " Chapter 3 Data statistics load(&quot;resources/data.Rdata&quot;) 3.1 Sequencing reads statistics data_stats$raw_reads %&gt;% sum() [1] 387468658 data_stats$raw_reads %&gt;% mean() [1] 19373433 data_stats$raw_reads %&gt;% sd() [1] 6509982 3.2 DNA fractions #Per sample type data_stats %&gt;% mutate(mapped_host_perc=mapped_SceUnd/trimmed_reads) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(type) %&gt;% summarise(mean=mean(mapped_host_perc),sd=sd(mapped_host_perc)) # A tibble: 2 × 3 type mean sd &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 cloaca 0.688 0.0254 2 feces 0.0480 0.0557 #Overall data_stats %&gt;% mutate(mapped_perc=mapped_mags/trimmed_reads) %&gt;% summarise(mean=mean(mapped_perc),sd=sd(mapped_perc)) # A tibble: 1 × 2 mean sd &lt;dbl&gt; &lt;dbl&gt; 1 0.294 0.292 #Per sample type data_stats %&gt;% mutate(mapped_perc=mapped_mags/trimmed_reads) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(type) %&gt;% summarise(mean=mean(mapped_perc),sd=sd(mapped_perc)) # A tibble: 2 × 3 type mean sd &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 cloaca 0.0152 0.00906 2 feces 0.573 0.0849 data_stats %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% lmerTest::lmer(mapped_SceUnd ~ type + (1 | individual), data = ., REML = FALSE) %&gt;% summary() Warning in as_lmerModLT(model, devfun): Model may not have converged with 1 eigenvalue close to zero: 5.8e-12 Linear mixed model fit by maximum likelihood . t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] Formula: mapped_SceUnd ~ type + (1 | individual) Data: . AIC BIC logLik deviance df.resid 662.4 666.4 -327.2 654.4 16 Scaled residuals: Min 1Q Median 3Q Max -1.53104 -0.32590 -0.02621 0.19221 2.31623 Random effects: Groups Name Variance Std.Dev. individual (Intercept) 3.180e+12 1783257 Residual 6.856e+12 2618430 Number of obs: 20, groups: individual, 10 Fixed effects: Estimate Std. Error df t value Pr(&gt;|t|) (Intercept) 1.340e+07 1.002e+06 2.307e+01 13.37 2.37e-12 *** typefeces -1.240e+07 1.171e+06 1.172e+26 -10.59 &lt; 2e-16 *** --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Correlation of Fixed Effects: (Intr) typefeces -0.584 data_stats %&gt;% mutate( low_quality = raw_reads - trimmed_reads, unmapped_reads = trimmed_reads - mapped_SceUnd - mapped_mags ) %&gt;% select(sample, low_quality, mapped_SceUnd, mapped_mags, unmapped_reads) %&gt;% pivot_longer(-sample) %&gt;% separate(col = &quot;sample&quot;, into = c(&quot;sample&quot;, &quot;tissue&quot;), sep = &quot;\\\\.&quot;, remove = FALSE) %&gt;% mutate(name=factor(name,levels=c(&quot;low_quality&quot;,&quot;mapped_SceUnd&quot;,&quot;unmapped_reads&quot;,&quot;mapped_mags&quot;))) %&gt;% mutate(sample=factor(sample,levels=c(&quot;Sg1&quot;,&quot;Sg2&quot;,&quot;Sg3&quot;,&quot;Sg4&quot;,&quot;Sg5&quot;,&quot;Sg6&quot;,&quot;Sg7&quot;,&quot;Sg8&quot;,&quot;Sg9&quot;,&quot;Sg10&quot;))) %&gt;% ggplot(aes(x = sample, y = value, fill = name)) + geom_bar(stat = &quot;identity&quot;, position = &quot;fill&quot;) + scale_fill_manual(name=&quot;Sequence type&quot;, breaks=c(&quot;low_quality&quot;,&quot;mapped_SceUnd&quot;,&quot;unmapped_reads&quot;,&quot;mapped_mags&quot;), labels=c(&quot;Low quality&quot;,&quot;Mapped to host&quot;,&quot;Unmapped&quot;,&quot;Mapped to MAGs&quot;), values=c(&quot;#CCCCCC&quot;, &quot;#bcdee1&quot;, &quot;#d8b8a3&quot;,&quot;#93655c&quot;))+ facet_wrap(~tissue, scales = &quot;free&quot;, labeller = labeller(tissue = c(cloaca=&quot;Cloaca&quot;,feces=&quot;Faeces&quot;))) + theme_minimal() + labs(y=&quot;DNA sequence fraction&quot;,x=&quot;Samples&quot;) 3.3 Recovered microbial fraction data_stats %&gt;% mutate( unmapped_reads = trimmed_reads - mapped_SceUnd - mapped_mags, mag_proportion = mapped_mags / (mapped_mags + unmapped_reads), singlem_read_fraction = singlem_read_fraction ) %&gt;% select(sample, mag_proportion, singlem_read_fraction) %&gt;% mutate( mag_proportion = if_else(singlem_read_fraction == 0, 0, mag_proportion), singlem_read_fraction = if_else(singlem_read_fraction == 0, NA, singlem_read_fraction), singlem_read_fraction = if_else(singlem_read_fraction &lt; mag_proportion, NA, singlem_read_fraction), singlem_read_fraction = if_else(singlem_read_fraction &gt; 1, 1, singlem_read_fraction) ) %&gt;% pivot_longer(-sample, names_to = &quot;proportion&quot;, values_to = &quot;value&quot;) %&gt;% mutate( proportion = factor( proportion, levels = c(&quot;mag_proportion&quot;, &quot;singlem_read_fraction&quot;) ) ) %&gt;% separate(col = &quot;sample&quot;, into = c(&quot;sample&quot;, &quot;tissue&quot;), sep = &quot;\\\\.&quot;, remove = FALSE) %&gt;% mutate(sample=factor(sample,levels=rev(c(&quot;Sg1&quot;,&quot;Sg2&quot;,&quot;Sg3&quot;,&quot;Sg4&quot;,&quot;Sg5&quot;,&quot;Sg6&quot;,&quot;Sg7&quot;,&quot;Sg8&quot;,&quot;Sg9&quot;,&quot;Sg10&quot;)))) %&gt;% ggplot(aes(x = value, y = sample, color = proportion)) + geom_line(aes(group = sample), color = &quot;#f8a538&quot;) + geom_point() + scale_color_manual(name=&quot;Proportion&quot;, breaks=c(&quot;mag_proportion&quot;,&quot;singlem_read_fraction&quot;), labels=c(&quot;Recovered&quot;,&quot;Estimated&quot;), values=c(&quot;#52e1e8&quot;, &quot;#876b53&quot;))+ facet_wrap(tissue~., scales = &quot;free&quot;, labeller = labeller(tissue = c(cloaca=&quot;Cloaca&quot;,feces=&quot;Faeces&quot;))) + theme_minimal() + labs(y = &quot;Samples&quot;, x = &quot;Prokaryotic fraction&quot;) + scale_x_continuous(limits = c(0, 1)) + theme( axis.text.x = element_text( angle = 90, vjust = 0.5, hjust = 1, size = 6), legend.position = &quot;right&quot; ) "],["mag-catalogue.html", "Chapter 4 MAG catalogue 4.1 Genome phylogeny 4.2 Genome quality 4.3 Functional overview 4.4 Functional ordination", " Chapter 4 MAG catalogue load(&quot;resources/data.Rdata&quot;) 4.1 Genome phylogeny # Generate the phylum color heatmap phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Generate basal tree circular_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% # extend to ultrametric for the sake of visualisation ggtree(., layout=&quot;fan&quot;, open.angle=10, size=0.5) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0.55, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + geom_tiplab2(size=1, hjust=-0.1) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) # Flush color scale to enable a new color scheme in the next ring circular_tree &lt;- circular_tree + new_scale_fill() # Add completeness ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_gradient(low = &quot;#d1f4ba&quot;, high = &quot;#f4baba&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=completeness, y=genome, fill=contamination), offset = 0.55, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add genome-size ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=length, y=genome), offset = 0.05, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add text circular_tree &lt;- circular_tree + annotate(&#39;text&#39;, x=2.7, y=0, label=&#39; Phylum&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.1, y=0, label=&#39; Genome quality&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.5, y=0, label=&#39; Genome size&#39;, family=&#39;arial&#39;, size=3.5) #Plot circular tree circular_tree %&gt;% open_tree(30) %&gt;% rotate_tree(90) 4.2 Genome quality genome_metadata$completeness %&gt;% mean() [1] 88.24717 genome_metadata$completeness %&gt;% sd() [1] 11.3025 genome_metadata$contamination %&gt;% mean() [1] 3.382126 genome_metadata$contamination %&gt;% sd() [1] 3.641847 #Generate quality biplot genome_biplot &lt;- genome_metadata %&gt;% select(c(genome,domain,phylum,completeness,contamination,length)) %&gt;% arrange(match(genome, rev(genome_tree$tip.label))) %&gt;% #sort MAGs according to phylogenetic tree ggplot(aes(x=completeness,y=contamination,size=length,color=phylum)) + geom_point(alpha=0.7) + ylim(c(10,0)) + scale_color_manual(values=phylum_colors) + labs(y= &quot;Contamination&quot;, x = &quot;Completeness&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;) #Generate contamination boxplot genome_contamination &lt;- genome_metadata %&gt;% ggplot(aes(y=contamination)) + ylim(c(10,0)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0.40, 0),&quot;inches&quot;)) #add bottom-margin (top, right, bottom, left) #Generate completeness boxplot genome_completeness &lt;- genome_metadata %&gt;% ggplot(aes(x=completeness)) + xlim(c(50,100)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0, 0.50),&quot;inches&quot;)) #add left-margin (top, right, bottom, left) #Render composite figure grid.arrange(grobs = list(genome_completeness,genome_biplot,genome_contamination), layout_matrix = rbind(c(1,1,1,1,1,1,1,1,1,1,1,4), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3))) 4.3 Functional overview # Aggregate basal GIFT into elements function_table &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) # Generate basal tree function_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips function_tree &lt;- gheatmap(function_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() #Add functions heatmap function_tree &lt;- gheatmap(function_tree, function_table, offset=0.5, width=3.5, colnames=FALSE) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) + labs(fill=&quot;GIFT&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() # Add completeness barplots function_tree &lt;- function_tree + geom_fruit(data=genome_metadata, geom=geom_bar, grid.params=list(axis=&quot;x&quot;, text.size=2, nbreak = 1), axis.params=list(vline=TRUE), mapping = aes(x=length, y=genome, fill=completeness), offset = 3.8, orientation=&quot;y&quot;, stat=&quot;identity&quot;) + scale_fill_gradient(low = &quot;#cf8888&quot;, high = &quot;#a2cc87&quot;) + labs(fill=&quot;Genome\\ncompleteness&quot;) function_tree 4.4 Functional ordination # Generate the tSNE ordination tSNE_function &lt;- Rtsne(X=function_table, dims = 2, check_duplicates = FALSE) # Plot the ordination function_ordination &lt;- tSNE_function$Y %&gt;% as.data.frame() %&gt;% mutate(genome=rownames(function_table)) %&gt;% inner_join(genome_metadata, by=&quot;genome&quot;) %&gt;% rename(tSNE1=&quot;V1&quot;, tSNE2=&quot;V2&quot;) %&gt;% select(genome,phylum,tSNE1,tSNE2, length) %&gt;% ggplot(aes(x = tSNE1, y = tSNE2, color = phylum, size=length))+ geom_point(shape=16, alpha=0.7) + scale_color_manual(values=phylum_colors) + theme_minimal() + labs(color=&quot;Phylum&quot;, size=&quot;Genome size&quot;) + guides(color = guide_legend(override.aes = list(size = 5))) # enlarge Phylum dots in legend function_ordination "],["community-composition.html", "Chapter 5 Community composition 5.1 Taxonomy overview 5.2 Alpha diversity 5.3 Beta diversity", " Chapter 5 Community composition load(&quot;resources/data.Rdata&quot;) 5.1 Taxonomy overview 5.1.1 Stacked barplot genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata filter(count &gt; 0) %&gt;% #filter 0 counts ggplot(., aes(x=sample,y=count, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + facet_nested(. ~ individual, scales=&quot;free&quot;) + #facet per day and treatment guides(fill = guide_legend(ncol = 1)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;)) + labs(fill=&quot;Phylum&quot;,y = &quot;Relative abundance&quot;,x=&quot;Samples&quot;) 5.1.2 Phylum relative abundances phylum_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% group_by(sample,phylum) %&gt;% summarise(relabun=sum(count)) `summarise()` has grouped output by &#39;sample&#39;. You can override using the `.groups` argument. phylum_arrange &lt;- phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun)) %&gt;% arrange(-mean) %&gt;% select(phylum) %&gt;% pull() phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun)) # A tibble: 10 × 2 phylum mean &lt;chr&gt; &lt;dbl&gt; 1 p__Bacillota 0.0189 2 p__Bacillota_A 0.236 3 p__Bacillota_B 0.00355 4 p__Bacillota_C 0.00260 5 p__Bacteroidota 0.218 6 p__Campylobacterota 0.0995 7 p__Cyanobacteriota 0.000493 8 p__Desulfobacterota 0.0116 9 p__Pseudomonadota 0.404 10 p__Verrucomicrobiota 0.00600 phylum_summary %&gt;% filter(phylum %in% phylum_arrange) %&gt;% mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %&gt;% ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum)) + #scale_color_manual(values=c(&quot;#F4D9AE&quot;,&quot;#DE9E46&quot;,&quot;#2D8077&quot;,&quot;#CD4F41&quot;)) + #geom_boxplot() + geom_jitter(alpha=0.5) + theme_minimal() genus_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,genus) %&gt;% summarise(relabun=sum(count)) `summarise()` has grouped output by &#39;sample&#39;. You can override using the `.groups` argument. genus_arrange &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=sum(relabun)) %&gt;% arrange(-mean) %&gt;% select(genus) %&gt;% pull() genus_summary %&gt;% left_join(genome_metadata %&gt;% select(genus,phylum) %&gt;% unique(),by=join_by(genus==genus)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% filter(genus %in% genus_arrange[1:20]) %&gt;% mutate(genus=factor(genus,levels=rev(genus_arrange[1:20]))) %&gt;% ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) + scale_color_manual(values=phylum_colors[-8]) + #geom_boxplot() + geom_jitter(alpha=0.5) + facet_grid(.~type)+ theme_minimal() Warning in left_join(., genome_metadata %&gt;% select(genus, phylum) %&gt;% unique(), : Detected an unexpected many-to-many relationship between `x` and `y`. ℹ Row 1 of `x` matches multiple rows in `y`. ℹ Row 8 of `y` matches multiple rows in `x`. ℹ If a many-to-many relationship is expected, set `relationship = &quot;many-to-many&quot;` to silence this warning. 5.2 Alpha diversity # Calculate Hill numbers richness &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 0) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(richness = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) neutral &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(neutral = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) phylogenetic &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, tree = genome_tree) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(phylogenetic = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) # Aggregate basal GIFT into elements dist &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% traits2dist(., method = &quot;gower&quot;) functional &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, dist = dist) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(functional = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) %&gt;% mutate(functional = if_else(is.nan(functional), 1, functional)) # Merge all metrics alpha_div &lt;- richness %&gt;% full_join(neutral, by = join_by(sample == sample)) %&gt;% full_join(phylogenetic, by = join_by(sample == sample)) %&gt;% full_join(functional, by = join_by(sample == sample)) alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% mutate(metric=factor(metric,levels=c(&quot;richness&quot;,&quot;neutral&quot;,&quot;phylogenetic&quot;,&quot;functional&quot;))) %&gt;% ggplot(aes(y = value, x = type, group=type, color=type, fill=type)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Sample type&quot;, breaks=c(&quot;cloaca&quot;,&quot;feces&quot;), labels=c(&quot;Cloaca&quot;,&quot;Faeces&quot;), values=c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;)) + scale_fill_manual(name=&quot;Sample type&quot;, breaks=c(&quot;cloaca&quot;,&quot;feces&quot;), labels=c(&quot;Cloaca&quot;,&quot;Faeces&quot;), values=c(&quot;#e5bd5b50&quot;, &quot;#6b739850&quot;)) + facet_wrap(. ~ metric, scales = &quot;free&quot;, ncol=4) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) alpha_div %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% lmerTest::lmer(richness ~ type + (1 | individual), data = ., REML = FALSE) %&gt;% summary() boundary (singular) fit: see help(&#39;isSingular&#39;) Linear mixed model fit by maximum likelihood . t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] Formula: richness ~ type + (1 | individual) Data: . AIC BIC logLik deviance df.resid 154.6 158.6 -73.3 146.6 16 Scaled residuals: Min 1Q Median 3Q Max -2.31795 -0.06351 -0.06351 0.43395 2.44496 Random effects: Groups Name Variance Std.Dev. individual (Intercept) 0.00 0.000 Residual 89.26 9.448 Number of obs: 20, groups: individual, 10 Fixed effects: Estimate Std. Error df t value Pr(&gt;|t|) (Intercept) 1.600 2.988 20.000 0.536 0.598 typefeces 61.300 4.225 20.000 14.508 4.44e-12 *** --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Correlation of Fixed Effects: (Intr) typefeces -0.707 optimizer (nloptwrap) convergence code: 0 (OK) boundary (singular) fit: see help(&#39;isSingular&#39;) alpha_div %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% lmerTest::lmer(neutral ~ type + (1 | individual), data = ., REML = FALSE) %&gt;% summary() boundary (singular) fit: see help(&#39;isSingular&#39;) Linear mixed model fit by maximum likelihood . t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] Formula: neutral ~ type + (1 | individual) Data: . AIC BIC logLik deviance df.resid 123.1 127.1 -57.6 115.1 16 Scaled residuals: Min 1Q Median 3Q Max -2.57787 -0.06988 -0.06988 0.38596 2.56691 Random effects: Groups Name Variance Std.Dev. individual (Intercept) 2.472e-17 4.972e-09 Residual 1.849e+01 4.300e+00 Number of obs: 20, groups: individual, 10 Fixed effects: Estimate Std. Error df t value Pr(&gt;|t|) (Intercept) 1.301 1.360 20.000 0.956 0.35 typefeces 32.950 1.923 20.000 17.133 2.02e-13 *** --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Correlation of Fixed Effects: (Intr) typefeces -0.707 optimizer (nloptwrap) convergence code: 0 (OK) boundary (singular) fit: see help(&#39;isSingular&#39;) alpha_div %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% lmerTest::lmer(phylogenetic ~ type + (1 | individual), data = ., REML = FALSE) %&gt;% summary() boundary (singular) fit: see help(&#39;isSingular&#39;) Linear mixed model fit by maximum likelihood . t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] Formula: phylogenetic ~ type + (1 | individual) Data: . AIC BIC logLik deviance df.resid 52.6 56.6 -22.3 44.6 16 Scaled residuals: Min 1Q Median 3Q Max -1.27116 -0.47030 -0.32284 -0.07274 2.84376 Random effects: Groups Name Variance Std.Dev. individual (Intercept) 0.0000 0.0000 Residual 0.5455 0.7386 Number of obs: 20, groups: individual, 10 Fixed effects: Estimate Std. Error df t value Pr(&gt;|t|) (Intercept) 1.2384 0.2336 20.0000 5.303 3.44e-05 *** typefeces 3.1027 0.3303 20.0000 9.394 8.96e-09 *** --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Correlation of Fixed Effects: (Intr) typefeces -0.707 optimizer (nloptwrap) convergence code: 0 (OK) boundary (singular) fit: see help(&#39;isSingular&#39;) alpha_div %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% lmerTest::lmer(functional ~ type + (1 | individual), data = ., REML = FALSE) %&gt;% summary() boundary (singular) fit: see help(&#39;isSingular&#39;) Linear mixed model fit by maximum likelihood . t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] Formula: functional ~ type + (1 | individual) Data: . AIC BIC logLik deviance df.resid -22.8 -18.8 15.4 -30.8 16 Scaled residuals: Min 1Q Median 3Q Max -0.4712 -0.4712 -0.3806 -0.0295 4.0344 Random effects: Groups Name Variance Std.Dev. individual (Intercept) 9.350e-22 3.058e-11 Residual 1.257e-02 1.121e-01 Number of obs: 20, groups: individual, 10 Fixed effects: Estimate Std. Error df t value Pr(&gt;|t|) (Intercept) 1.05283 0.03546 20.00000 29.690 &lt; 2e-16 *** typefeces 0.41363 0.05015 20.00000 8.248 7.25e-08 *** --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Correlation of Fixed Effects: (Intr) typefeces -0.707 optimizer (nloptwrap) convergence code: 0 (OK) boundary (singular) fit: see help(&#39;isSingular&#39;) 5.3 Beta diversity beta_q0n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 0) beta_q1n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 1) beta_q1p &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 1, tree = genome_tree) beta_q1f &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 1, dist = dist) 5.3.1 Neutral diversity plot beta_q0n$C %&gt;% vegan::metaMDS(., trymax = 500, k = 2, verbosity = FALSE, trace=FALSE) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(type) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% mutate(individual=factor(individual, levels=c(&quot;Sg1&quot;,&quot;Sg2&quot;,&quot;Sg3&quot;,&quot;Sg4&quot;,&quot;Sg5&quot;,&quot;Sg6&quot;,&quot;Sg7&quot;,&quot;Sg8&quot;,&quot;Sg9&quot;,&quot;Sg10&quot;))) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = type, shape = individual)) + scale_color_manual(name=&quot;Sample type&quot;, breaks=c(&quot;cloaca&quot;,&quot;feces&quot;), labels=c(&quot;Cloaca&quot;,&quot;Faeces&quot;), values=c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;)) + scale_shape_manual(values = 1:10) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(shape=&quot;Individual&quot;) 5.3.2 Functional diversity plot beta_q1f$C %&gt;% vegan::metaMDS(., trymax = 500, k = 2, verbosity = FALSE, trace=FALSE) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(type) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% mutate(individual=factor(individual, levels=c(&quot;Sg1&quot;,&quot;Sg2&quot;,&quot;Sg3&quot;,&quot;Sg4&quot;,&quot;Sg5&quot;,&quot;Sg6&quot;,&quot;Sg7&quot;,&quot;Sg8&quot;,&quot;Sg9&quot;,&quot;Sg10&quot;))) %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = type, shape = individual)) + scale_color_manual(name=&quot;Sample type&quot;, breaks=c(&quot;cloaca&quot;,&quot;feces&quot;), labels=c(&quot;Cloaca&quot;,&quot;Faeces&quot;), values=c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;)) + scale_shape_manual(values = 1:10) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) "],["differential-abundance.html", "Chapter 6 Differential abundance 6.1 Create phyloseq object 6.2 Run ANCOMBC2 6.3 Plot results", " Chapter 6 Differential abundance load(&quot;resources/data.Rdata&quot;) 6.1 Create phyloseq object # phyloseq object considering structual zeros phylo_samples &lt;- sample_metadata %&gt;% column_to_rownames(&quot;sample&quot;) %&gt;% sample_data() # convert to phyloseq sample_data object phylo_genome &lt;- genome_counts %&gt;% column_to_rownames(&quot;genome&quot;) %&gt;% mutate_all(~ replace(., . == 0, 0.00001)) %&gt;% # add pseudo counts to avoid structural zero issues (note this approach can be improved!) otu_table(., taxa_are_rows = TRUE) phylo_taxonomy &lt;- genome_metadata %&gt;% filter(genome %in% rownames(phylo_genome)) %&gt;% # remove structural zeros mutate(genome2 = genome) %&gt;% # create a pseudo genome name column column_to_rownames(&quot;genome2&quot;) %&gt;% dplyr::select(domain, phylum, class, order, family, genus, species, genome) %&gt;% # add an additional taxonomic level to ensure genome-level analysis (as no all genomes have species-level taxonomic assignments. Otherwise, ANCOMBC2 aggregates analyses per species) as.matrix() %&gt;% tax_table() # convert to phyloseq tax_table object phyloseq &lt;- phyloseq(phylo_genome, phylo_taxonomy, phylo_samples) 6.2 Run ANCOMBC2 set.seed(1234) # set seed for reproducibility differential_abundance &lt;- ancombc2( data = phyloseq, assay_name = &quot;counts&quot;, tax_level = NULL, # change to agglomerate analysis to a higher taxonomic range fix_formula = &quot;type&quot;, # fixed variable(s) rand_formula = &quot;(1|individual)&quot;, p_adj_method = &quot;holm&quot;, pseudo_sens = TRUE, prv_cut = 0.10, lib_cut = 0, s0_perc = 0.05, group = NULL, struc_zero = FALSE, neg_lb = FALSE, alpha = 0.05, n_cl = 2, verbose = TRUE, global = FALSE, pairwise = FALSE, dunnet = FALSE, trend = FALSE, iter_control = list(tol = 1e-5, max_iter = 20, verbose = FALSE), em_control = list(tol = 1e-5, max_iter = 100), lme_control = lme4::lmerControl(), mdfdr_control = list(fwer_ctrl_method = &quot;holm&quot;, B = 100), trend_control = NULL ) 6.3 Plot results tax &lt;- data.frame(phyloseq@tax_table) %&gt;% rownames_to_column(., &quot;taxon&quot;) differential_abundance_table &lt;- differential_abundance$res %&gt;% dplyr::select(genome=taxon, lfc_typefeces, p_typefeces) %&gt;% filter(p_typefeces &lt; 0.05) %&gt;% dplyr::arrange(p_typefeces) %&gt;% merge(., tax, by = &quot;genome&quot;) ggplot(differential_abundance_table, aes(x = forcats::fct_rev(genome), y = lfc_typefeces, color = phylum)) + geom_point(size = 3) + scale_color_manual(values = phylum_colors[-c(3,4)]) + geom_hline(yintercept = 0) + coord_flip() + facet_grid(phylum ~ ., scales = &quot;free&quot;, space = &quot;free&quot;) + theme( panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), axis.title.x = element_blank(), strip.background = element_blank(), strip.text = element_blank() ) + xlab(&quot;Genome&quot;) + ylab(&quot;log2FoldChange&quot;) + guides(col = guide_legend(&quot;Phylum&quot;)) ancom_result &lt;- differential_abundance$res %&gt;% na.omit() %&gt;% dplyr::select(genome=taxon, lfc_typefeces, p_typefeces) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) ancom_result %&gt;% mutate(significance = ifelse(p_typefeces &lt; 0.05, &quot;1&quot;, &quot;0&quot;)) %&gt;% ggplot(., aes(x = lfc_typefeces, y = -log(p_typefeces), color = significance)) + geom_point() + xlim(c(-10,4)) + scale_color_manual(values = c(&quot;#cccccc&quot;, &quot;#00FFFF&quot;)) + geom_text(aes(3, 1), label = &quot;Enriched\\nin cloaca&quot;, color = &quot;#666666&quot;) + geom_text(aes(-4, 1), label = &quot;Enriched\\nin faeces&quot;, color = &quot;#666666&quot;) + labs(color = &quot;Significance&quot;, y = &quot;Difference between behaviours&quot;, x = &quot;p-value&quot;) + theme_classic() "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
