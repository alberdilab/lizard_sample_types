[["index.html", "AlberdiLab | Hernandez et al. 2024 Contrasting recovery of metagenome‑assembled genomes and derived microbial communities from lizard fecal and cloacal samples Chapter 1 Introduction 1.1 Prepare the R environment", " AlberdiLab | Hernandez et al. 2024 Contrasting recovery of metagenome‑assembled genomes and derived microbial communities from lizard fecal and cloacal samples Mauricio Hernandez1 Jorge Langa2 Ostaizka Aizpurua3 Yendi E. Navarro-Noya4 Antton Alberdi5 2024-04-20 Chapter 1 Introduction This webbook contains all the code used for data analysis in study on the recovery of metagenome‑assembled genomes and derived microbial communities from lizard fecal and cloacal samples. 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/alberdilab/lizard_sample_types.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) library(tinytable) library(broom) library(broom.mixed) # For tree handling library(ape) library(phyloseq) library(phytools) # For plotting library(ggplot2) library(ggrepel) library(ggpubr) library(ggnewscale) library(gridExtra) library(ggtreeExtra) library(ggtree) library(ggh4x) # For statistics library(spaa) library(vegan) library(Rtsne) library(geiger) library(hilldiv2) library(distillR) library(ANCOMBC) library(lme4) Universidad Nacional Autónoma de Honduras, delmer.hernandez@unah.edu.hn↩︎ University of Copenhagen, jorge.langa@sund.ku.dk↩︎ University of Copenhagen, ostaizka.aizpurua@sund.ku.dk↩︎ Universidad Autónoma de Tlaxcala, yendiebenezer.navarro.n@uatx.mx↩︎ University of Copenhagen, antton.alberdi@sund.ku.dk↩︎ "],["prepare-data.html", "Chapter 2 Prepare data 2.1 Load data 2.2 Create working objects 2.3 Load data statistics 2.4 Prepare color scheme 2.5 Wrap working objects", " Chapter 2 Prepare data 2.1 Load data Load the original data files outputted by the bioinformatic pipeline. 2.1.1 Sample metadata sample_metadata &lt;- read_tsv(&quot;resources/metadata.tsv&quot;) 2.1.2 Read counts read_counts &lt;- read_tsv(&quot;resources/coverm/genome.count.tsv.xz&quot;) %&gt;% rename(genome=1) 2.1.3 Genome base hits genome_hits &lt;- read_tsv(&quot;resources/coverm/genome.covered_bases.tsv.xz&quot;) %&gt;% rename(genome=1) 2.1.4 Genome taxonomy genome_taxonomy &lt;- read_tsv(&quot;resources/gtdbtk/gtdbtk.summary.tsv.xz&quot;) %&gt;% select(mag_id = user_genome, classification) %&gt;% separate( classification, into = c(&quot;domain&quot;, &quot;phylum&quot;, &quot;class&quot;, &quot;order&quot;, &quot;family&quot;, &quot;genus&quot;, &quot;species&quot;), sep = &quot;;&quot;) %&gt;% rename(genome=1) 2.1.5 Genome quality genome_quality &lt;- read_tsv(&quot;resources/checkm2/quality_report.tsv.xz&quot;) %&gt;% select( genome = Name, completeness = Completeness, contamination = Contamination, length = Genome_Size, gc = GC_Content ) 2.1.6 Genome tree genome_tree &lt;- read_tree(&quot;resources/gtdbtk/gtdbtk.backbone.bac120.classify.tree&quot;) genome_tree$tip.label &lt;- str_replace_all(genome_tree$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names genome_tree &lt;- keep.tip(genome_tree, tip=genome_taxonomy$genome) # keep only MAG tips 2.1.7 Genome annotations genome_annotations &lt;- read_tsv(&quot;resources/dram/annotations.tsv.xz&quot;) %&gt;% rename(gene=1, genome=2, contig=3) 2.2 Create working objects Transform the original data files into working objects for downstream analyses. 2.2.1 Merge genome taxonomy and quality genome_metadata &lt;- genome_taxonomy %&gt;% left_join(genome_quality,by=join_by(genome==genome)) #join quality 2.2.2 Calculate genome coverage genome_coverage &lt;- genome_hits %&gt;% mutate(across(where(is.numeric), ~ ./genome_metadata$length)) 2.2.3 Filter reads by coverage min_coverage=0.3 read_counts_filt &lt;- genome_coverage %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts[[cur_column()]])) 2.2.4 Transform reads into genome counts readlength=150 genome_counts &lt;- read_counts %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) readlength=150 genome_counts_filt &lt;- read_counts_filt %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) 2.2.5 Distill annotations into GIFTs genome_gifts &lt;- distill(genome_annotations,GIFT_db,genomecol=2,annotcol=c(9,10,19), verbosity=F) 2.3 Load data statistics 2.3.1 Raw reads raw_reads &lt;- &quot;resources/report/by_step/reads_data/multiqc_general_stats.txt.xz&quot; %&gt;% read_tsv() %&gt;% select( sample = Sample, raw_reads = `FastQC_mqc-generalstats-fastqc-total_sequences` ) %&gt;% mutate( sample = sample %&gt;% str_remove_all(&quot;_1$&quot;) %&gt;% str_remove_all(&quot;_2$&quot;) ) %&gt;% summarise(raw_reads = sum(raw_reads), .by = sample) 2.3.2 Quality-filtered reads fastp_reads &lt;- &quot;resources/report/by_step/preprocessing_data/multiqc_general_stats.txt.xz&quot; %&gt;% read_tsv() %&gt;% filter(str_detect(Sample, &quot;fastp&quot;)) %&gt;% select( sample = Sample, trimmed_reads = `FastQC_mqc-generalstats-fastqc-total_sequences` ) %&gt;% mutate( sample = sample %&gt;% str_remove_all(&quot;_[u12]+$&quot;) %&gt;% str_remove_all(&quot;^fastp \\\\| &quot;) ) %&gt;% summarise(trimmed_reads = sum(trimmed_reads), .by = sample) 2.3.3 Host-mapped reads host_mapped &lt;- &quot;resources/report/by_step/preprocessing_data/multiqc_general_stats.txt.xz&quot; %&gt;% read_tsv() %&gt;% filter(!str_detect(Sample, &quot;fastp&quot;)) %&gt;% select( sample = Sample, host_mapped = `Samtools_mqc-generalstats-samtools-reads_mapped`, mapping_total = `Samtools_mqc-generalstats-samtools-raw_total_sequences` ) %&gt;% mutate( host_unmapped = mapping_total - host_mapped ) %&gt;% filter(!is.na(host_mapped)) %&gt;% separate( col = sample, into = c(&quot;host_name&quot;, &quot;sample&quot;), sep = &quot; \\\\| &quot; ) %&gt;% rename(mapped = host_mapped, unmapped = host_unmapped) %&gt;% select(-mapping_total) %&gt;% pivot_longer(-host_name:-sample) %&gt;% mutate( name = str_glue(&quot;{name}_{host_name}&quot;) ) %&gt;% select(-host_name) %&gt;% pivot_wider() 2.3.4 Prokaryotic fraction singlem &lt;- &quot;resources/singlem/microbial_fraction.tsv.xz&quot; %&gt;% read_tsv() %&gt;% distinct() %&gt;% mutate( sample = sample %&gt;% str_remove_all(&quot;_1$&quot;), read_fraction = read_fraction %&gt;% str_remove(&quot;%&quot;) %&gt;% as.numeric(), read_fraction = read_fraction / 100 ) %&gt;% select( sample, singlem_prokaryotic_bases = bacterial_archaeal_bases, singlem_metagenome_size = metagenome_size, singlem_read_fraction = read_fraction, ) 2.3.5 Metagenomic complexity nonpareil &lt;- &quot;resources/nonpareil/nonpareil.tsv.xz&quot; %&gt;% read_tsv() %&gt;% select(sample=sample_id, nonpareil_c = C, nonpareil_diversity = diversity) 2.3.6 MAG-mapped reads mag_mapping &lt;- &quot;resources/coverm/contig.count.tsv.xz&quot; %&gt;% read_tsv() %&gt;% pivot_longer(-sequence_id) %&gt;% summarise(value = sum(value), .by = &quot;name&quot;) %&gt;% rename(sample = name, mapped_mags = value) 2.3.7 Wrap data statistics data_stats &lt;- raw_reads %&gt;% left_join(fastp_reads) %&gt;% left_join(host_mapped) %&gt;% left_join(singlem) %&gt;% left_join(nonpareil) %&gt;% left_join(mag_mapping) 2.4 Prepare color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) 2.5 Wrap working objects All working objects are wrapped into a single Rdata object to facilitate downstream usage. save(sample_metadata, genome_metadata, read_counts, genome_counts, genome_counts_filt, genome_tree, genome_gifts, phylum_colors, data_stats, file = &quot;resources/data.Rdata&quot;) "],["data-statistics.html", "Chapter 3 Data statistics 3.1 Sequencing reads statistics 3.2 DNA fractions 3.3 Recovered microbial fraction", " Chapter 3 Data statistics load(&quot;resources/data.Rdata&quot;) 3.1 Sequencing reads statistics data_stats$raw_reads %&gt;% sum() [1] 387468658 data_stats$raw_reads %&gt;% mean() [1] 19373433 data_stats$raw_reads %&gt;% sd() [1] 6509982 3.2 DNA fractions #Per sample type data_stats %&gt;% mutate(mapped_host_perc=mapped_SceUnd/trimmed_reads) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(type) %&gt;% summarise(mean=mean(mapped_host_perc),sd=sd(mapped_host_perc)) # A tibble: 2 × 3 type mean sd &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 cloaca 0.688 0.0254 2 feces 0.0480 0.0557 #Overall data_stats %&gt;% mutate(mapped_perc=mapped_mags/trimmed_reads) %&gt;% summarise(mean=mean(mapped_perc),sd=sd(mapped_perc)) # A tibble: 1 × 2 mean sd &lt;dbl&gt; &lt;dbl&gt; 1 0.294 0.292 #Per sample type data_stats %&gt;% mutate(mapped_perc=mapped_mags/trimmed_reads) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(type) %&gt;% summarise(mean=mean(mapped_perc),sd=sd(mapped_perc)) # A tibble: 2 × 3 type mean sd &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 cloaca 0.0152 0.00906 2 feces 0.573 0.0849 data_stats %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% lmerTest::lmer(mapped_SceUnd ~ type + (1 | individual), data = ., REML = FALSE) %&gt;% summary() Warning in as_lmerModLT(model, devfun): Model may not have converged with 1 eigenvalue close to zero: 5.8e-12 Linear mixed model fit by maximum likelihood . t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] Formula: mapped_SceUnd ~ type + (1 | individual) Data: . AIC BIC logLik deviance df.resid 662.4 666.4 -327.2 654.4 16 Scaled residuals: Min 1Q Median 3Q Max -1.53104 -0.32590 -0.02621 0.19221 2.31623 Random effects: Groups Name Variance Std.Dev. individual (Intercept) 3.180e+12 1783257 Residual 6.856e+12 2618430 Number of obs: 20, groups: individual, 10 Fixed effects: Estimate Std. Error df t value Pr(&gt;|t|) (Intercept) 1.340e+07 1.002e+06 2.307e+01 13.37 2.37e-12 *** typefeces -1.240e+07 1.171e+06 1.172e+26 -10.59 &lt; 2e-16 *** --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Correlation of Fixed Effects: (Intr) typefeces -0.584 data_stats %&gt;% mutate( low_quality = raw_reads - trimmed_reads, unmapped_reads = trimmed_reads - mapped_SceUnd - mapped_mags ) %&gt;% select(sample, low_quality, mapped_SceUnd, mapped_mags, unmapped_reads) %&gt;% pivot_longer(-sample) %&gt;% separate(col = &quot;sample&quot;, into = c(&quot;sample&quot;, &quot;tissue&quot;), sep = &quot;\\\\.&quot;, remove = FALSE) %&gt;% mutate(name=factor(name,levels=c(&quot;low_quality&quot;,&quot;mapped_SceUnd&quot;,&quot;unmapped_reads&quot;,&quot;mapped_mags&quot;))) %&gt;% mutate(sample=factor(sample,levels=c(&quot;Sg1&quot;,&quot;Sg2&quot;,&quot;Sg3&quot;,&quot;Sg4&quot;,&quot;Sg5&quot;,&quot;Sg6&quot;,&quot;Sg7&quot;,&quot;Sg8&quot;,&quot;Sg9&quot;,&quot;Sg10&quot;))) %&gt;% ggplot(aes(x = sample, y = value, fill = name)) + geom_bar(stat = &quot;identity&quot;, position = &quot;fill&quot;) + scale_fill_manual(name=&quot;Sequence type&quot;, breaks=c(&quot;low_quality&quot;,&quot;mapped_SceUnd&quot;,&quot;unmapped_reads&quot;,&quot;mapped_mags&quot;), labels=c(&quot;Low quality&quot;,&quot;Mapped to host&quot;,&quot;Unmapped&quot;,&quot;Mapped to MAGs&quot;), values=c(&quot;#CCCCCC&quot;, &quot;#bcdee1&quot;, &quot;#d8b8a3&quot;,&quot;#93655c&quot;))+ facet_wrap(~tissue, scales = &quot;free&quot;, labeller = labeller(tissue = c(cloaca=&quot;Cloaca&quot;,feces=&quot;Feces&quot;))) + theme_minimal() + labs(y=&quot;DNA sequence fraction&quot;,x=&quot;Samples&quot;) 3.3 Recovered microbial fraction data_stats %&gt;% mutate( unmapped_reads = trimmed_reads - mapped_SceUnd - mapped_mags, mag_proportion = mapped_mags / (mapped_mags + unmapped_reads), singlem_read_fraction = singlem_read_fraction ) %&gt;% select(sample, mag_proportion, singlem_read_fraction) %&gt;% mutate( mag_proportion = if_else(singlem_read_fraction == 0, 0, mag_proportion), singlem_read_fraction = if_else(singlem_read_fraction == 0, NA, singlem_read_fraction), singlem_read_fraction = if_else(singlem_read_fraction &lt; mag_proportion, NA, singlem_read_fraction), singlem_read_fraction = if_else(singlem_read_fraction &gt; 1, 1, singlem_read_fraction) ) %&gt;% pivot_longer(-sample, names_to = &quot;proportion&quot;, values_to = &quot;value&quot;) %&gt;% mutate( proportion = factor( proportion, levels = c(&quot;mag_proportion&quot;, &quot;singlem_read_fraction&quot;) ) ) %&gt;% separate(col = &quot;sample&quot;, into = c(&quot;sample&quot;, &quot;tissue&quot;), sep = &quot;\\\\.&quot;, remove = FALSE) %&gt;% mutate(sample=factor(sample,levels=rev(c(&quot;Sg1&quot;,&quot;Sg2&quot;,&quot;Sg3&quot;,&quot;Sg4&quot;,&quot;Sg5&quot;,&quot;Sg6&quot;,&quot;Sg7&quot;,&quot;Sg8&quot;,&quot;Sg9&quot;,&quot;Sg10&quot;)))) %&gt;% ggplot(aes(x = value, y = sample, color = proportion)) + geom_line(aes(group = sample), color = &quot;#f8a538&quot;) + geom_point() + scale_color_manual(name=&quot;Proportion&quot;, breaks=c(&quot;mag_proportion&quot;,&quot;singlem_read_fraction&quot;), labels=c(&quot;Recovered&quot;,&quot;Estimated&quot;), values=c(&quot;#52e1e8&quot;, &quot;#876b53&quot;))+ facet_wrap(tissue~., scales = &quot;free&quot;, labeller = labeller(tissue = c(cloaca=&quot;Cloaca&quot;,feces=&quot;Feces&quot;))) + theme_minimal() + labs(y = &quot;Samples&quot;, x = &quot;Prokaryotic fraction&quot;) + scale_x_continuous(limits = c(0, 1)) + theme( axis.text.x = element_text( angle = 90, vjust = 0.5, hjust = 1, size = 6), legend.position = &quot;right&quot; ) "],["mag-catalogue.html", "Chapter 4 MAG catalogue 4.1 Genome phylogeny 4.2 Genome quality 4.3 Functional overview 4.4 Functional ordination", " Chapter 4 MAG catalogue load(&quot;resources/data.Rdata&quot;) 4.1 Genome phylogeny # Generate the phylum color heatmap phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Generate basal tree circular_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% # extend to ultrametric for the sake of visualisation ggtree(., layout=&quot;fan&quot;, open.angle=10, size=0.5) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0.55, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + geom_tiplab2(size=1, hjust=-0.1) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) # Flush color scale to enable a new color scheme in the next ring circular_tree &lt;- circular_tree + new_scale_fill() # Add completeness ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_gradient(low = &quot;#d1f4ba&quot;, high = &quot;#f4baba&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=completeness, y=genome, fill=contamination), offset = 0.55, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add genome-size ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=length, y=genome), offset = 0.05, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add text circular_tree &lt;- circular_tree + annotate(&#39;text&#39;, x=2.7, y=0, label=&#39; Phylum&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.1, y=0, label=&#39; Genome quality&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.5, y=0, label=&#39; Genome size&#39;, family=&#39;arial&#39;, size=3.5) #Plot circular tree circular_tree %&gt;% open_tree(30) %&gt;% rotate_tree(90) 4.2 Genome quality genome_metadata$completeness %&gt;% mean() [1] 88.24717 genome_metadata$completeness %&gt;% sd() [1] 11.3025 genome_metadata$contamination %&gt;% mean() [1] 3.382126 genome_metadata$contamination %&gt;% sd() [1] 3.641847 #Generate quality biplot genome_biplot &lt;- genome_metadata %&gt;% select(c(genome,domain,phylum,completeness,contamination,length)) %&gt;% arrange(match(genome, rev(genome_tree$tip.label))) %&gt;% #sort MAGs according to phylogenetic tree ggplot(aes(x=completeness,y=contamination,size=length,color=phylum)) + geom_point(alpha=0.7) + ylim(c(10,0)) + scale_color_manual(values=phylum_colors) + labs(y= &quot;Contamination&quot;, x = &quot;Completeness&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;) #Generate contamination boxplot genome_contamination &lt;- genome_metadata %&gt;% ggplot(aes(y=contamination)) + ylim(c(10,0)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0.40, 0),&quot;inches&quot;)) #add bottom-margin (top, right, bottom, left) #Generate completeness boxplot genome_completeness &lt;- genome_metadata %&gt;% ggplot(aes(x=completeness)) + xlim(c(50,100)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0, 0.50),&quot;inches&quot;)) #add left-margin (top, right, bottom, left) #Render composite figure grid.arrange(grobs = list(genome_completeness,genome_biplot,genome_contamination), layout_matrix = rbind(c(1,1,1,1,1,1,1,1,1,1,1,4), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3))) 4.3 Functional overview # Aggregate basal GIFT into elements function_table &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) # Generate basal tree function_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips function_tree &lt;- gheatmap(function_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() #Add functions heatmap function_tree &lt;- gheatmap(function_tree, function_table, offset=0.5, width=3.5, colnames=FALSE) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) + labs(fill=&quot;GIFT&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() # Add completeness barplots function_tree &lt;- function_tree + geom_fruit(data=genome_metadata, geom=geom_bar, grid.params=list(axis=&quot;x&quot;, text.size=2, nbreak = 1), axis.params=list(vline=TRUE), mapping = aes(x=length, y=genome, fill=completeness), offset = 3.8, orientation=&quot;y&quot;, stat=&quot;identity&quot;) + scale_fill_gradient(low = &quot;#cf8888&quot;, high = &quot;#a2cc87&quot;) + labs(fill=&quot;Genome\\ncompleteness&quot;) function_tree 4.4 Functional ordination # Generate the tSNE ordination tSNE_function &lt;- Rtsne(X=function_table, dims = 2, check_duplicates = FALSE) # Plot the ordination function_ordination &lt;- tSNE_function$Y %&gt;% as.data.frame() %&gt;% mutate(genome=rownames(function_table)) %&gt;% inner_join(genome_metadata, by=&quot;genome&quot;) %&gt;% rename(tSNE1=&quot;V1&quot;, tSNE2=&quot;V2&quot;) %&gt;% select(genome,phylum,tSNE1,tSNE2, length) %&gt;% ggplot(aes(x = tSNE1, y = tSNE2, color = phylum, size=length))+ geom_point(shape=16, alpha=0.7) + scale_color_manual(values=phylum_colors) + theme_minimal() + labs(color=&quot;Phylum&quot;, size=&quot;Genome size&quot;) + guides(color = guide_legend(override.aes = list(size = 5))) # enlarge Phylum dots in legend function_ordination "],["community-composition.html", "Chapter 5 Community composition 5.1 Taxonomy overview 5.2 Taxonomy boxplot 5.3 Alpha diversity 5.4 Beta diversity", " Chapter 5 Community composition load(&quot;resources/data.Rdata&quot;) 5.1 Taxonomy overview 5.1.1 Stacked barplot genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata filter(count &gt; 0) %&gt;% #filter 0 counts mutate(individual=factor(individual,levels=c(&quot;Sg1&quot;,&quot;Sg2&quot;,&quot;Sg3&quot;,&quot;Sg4&quot;,&quot;Sg5&quot;,&quot;Sg6&quot;,&quot;Sg7&quot;,&quot;Sg8&quot;,&quot;Sg9&quot;,&quot;Sg10&quot;))) %&gt;% ggplot(., aes(x=sample,y=count, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + facet_nested(. ~ individual, scales=&quot;free&quot;) + #facet per day and treatment guides(fill = guide_legend(ncol = 1)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;)) + labs(fill=&quot;Phylum&quot;,y = &quot;Relative abundance&quot;,x=&quot;Samples&quot;) 5.1.2 Phylum relative abundances phylum_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% group_by(sample,phylum) %&gt;% summarise(relabun=sum(count)) phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun),sd=sd(relabun)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_9ux4aroee9szg6e5pdp0 .table td.tinytable_css_jwoq6srfy45f2jv5o4tt, .table th.tinytable_css_jwoq6srfy45f2jv5o4tt { border-bottom: solid 0.1em #d3d8dc; } phylum mean sd p__Pseudomonadota 0.4043587138 0.464510230 p__Bacillota_A 0.2355141069 0.244605492 p__Bacteroidota 0.2175456020 0.236021607 p__Campylobacterota 0.0994533579 0.304943152 p__Bacillota 0.0188739477 0.033201006 p__Desulfobacterota 0.0116207168 0.017287755 p__Verrucomicrobiota 0.0059970322 0.008688895 p__Bacillota_B 0.0035458974 0.008344688 p__Bacillota_C 0.0025972812 0.004149428 p__Cyanobacteriota 0.0004933441 0.002206302 phylum_arrange &lt;- phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun)) %&gt;% arrange(-mean) %&gt;% select(phylum) %&gt;% pull() phylum_summary %&gt;% filter(phylum %in% phylum_arrange) %&gt;% mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %&gt;% ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum)) + scale_color_manual(values=phylum_colors[rev(phylum_arrange)]) + geom_jitter(alpha=0.5) + theme_minimal() + theme(legend.position=&quot;none&quot;) + labs(y=&quot;Phylum&quot;,x=&quot;Relative abundance&quot;) 5.2 Taxonomy boxplot 5.2.1 Family family_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,family) %&gt;% summarise(relabun=sum(count)) family_summary %&gt;% group_by(family) %&gt;% summarise(mean=mean(relabun),sd=sd(relabun)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_jwrhc1cpt1rfyoj5ldvd .table td.tinytable_css_1bgtos6k1il86gbwm6ai, .table th.tinytable_css_1bgtos6k1il86gbwm6ai { border-bottom: solid 0.1em #d3d8dc; } family mean sd f__Enterobacteriaceae 0.4037464761 0.465021606 f__Lachnospiraceae 0.2133481440 0.225431409 f__Bacteroidaceae 0.1153186642 0.123382341 f__Helicobacteraceae 0.0994533579 0.304943152 f__Rikenellaceae 0.0486474961 0.064078311 f__Tannerellaceae 0.0378215379 0.044036446 f__Marinifilaceae 0.0157579038 0.021580609 f__Desulfovibrionaceae 0.0116207168 0.017287755 f__Coprobacillaceae 0.0105137444 0.028390737 f__Oscillospiraceae 0.0085479249 0.014371104 f__Erysipelotrichaceae 0.0072817637 0.012422508 f__Akkermansiaceae 0.0059970322 0.008688895 f__Ruminococcaceae 0.0039836005 0.013192296 f__Acutalibacteraceae 0.0038692915 0.011317322 f__ 0.0036487884 0.005954936 f__Peptococcaceae 0.0035458974 0.008344688 f__UBA3700 0.0020129408 0.004923646 f__CAG-508 0.0015982064 0.002962023 f__Anaerovoracaceae 0.0011024918 0.002537585 f__UBA660 0.0010784396 0.002763385 f__CAG-239 0.0006122376 0.001950787 f__Gastranaerophilaceae 0.0004933441 0.002206302 family_arrange &lt;- family_summary %&gt;% group_by(family) %&gt;% summarise(mean=sum(relabun)) %&gt;% arrange(-mean) %&gt;% select(family) %&gt;% pull() family_summary %&gt;% left_join(genome_metadata %&gt;% select(family,phylum) %&gt;% unique(),by=join_by(family==family)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% filter(family %in% family_arrange[1:20]) %&gt;% mutate(family=factor(family,levels=rev(family_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=family, group=family, color=phylum)) + scale_color_manual(values=phylum_colors[-8]) + geom_jitter(alpha=0.5) + facet_grid(.~type)+ theme_minimal() + labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) 5.2.2 Genus genus_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,genus) %&gt;% summarise(relabun=sum(count)) %&gt;% filter(genus != &quot;g__&quot;) genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=mean(relabun),sd=sd(relabun)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_xzj2i0imd8t3g1h76dl5 .table td.tinytable_css_faz0ba0jvp5u2q2jxyrp, .table th.tinytable_css_faz0ba0jvp5u2q2jxyrp { border-bottom: solid 0.1em #d3d8dc; } genus mean sd g__Hafnia 0.2932325053 0.436327554 g__Salmonella 0.1042947262 0.306889524 g__Bacteroides 0.0679517227 0.073152380 g__Alistipes 0.0470015324 0.060867750 g__Phocaeicola 0.0401804345 0.047455237 g__Parabacteroides 0.0350520755 0.041334502 g__Hungatella 0.0270817008 0.043700922 g__Roseburia 0.0254184507 0.065658830 g__Clostridium_Q 0.0241488625 0.034458097 g__Ventrimonas 0.0214487733 0.028443966 g__Enterocloster 0.0200934974 0.030265361 g__Odoribacter 0.0157579038 0.021580609 g__Acetatifactor 0.0148914484 0.031889132 g__Eisenbergiella 0.0147363777 0.021995069 g__Bilophila 0.0098378050 0.015392491 g__Thomasclavelia 0.0076567822 0.026812811 g__Hungatella_A 0.0062116286 0.014527410 g__OM05-12 0.0060236930 0.008143623 g__Akkermansia 0.0059970322 0.008688895 g__Ventrisoma 0.0057439870 0.018833487 g__Breznakia 0.0047686166 0.010282743 g__Kineothrix 0.0047578797 0.014794492 g__Escherichia 0.0039316851 0.014505764 g__JAAYNV01 0.0033683384 0.010551754 g__Anaerotruncus 0.0029580653 0.013228870 g__Parabacteroides_B 0.0027694623 0.005044226 g__JAAWBF01 0.0026779996 0.005456383 g__UBA7185 0.0025995472 0.007619166 g__Dielma 0.0025131471 0.003740659 g__14-2 0.0024519108 0.005213359 g__Klebsiella 0.0022875595 0.006505467 g__Velocimicrobium 0.0022666655 0.004653853 g__Pseudoflavonifractor 0.0021662766 0.006472208 g__Lawsonibacter 0.0019945045 0.002717223 g__Desulfovibrio 0.0017829118 0.003516870 g__NSJ-51 0.0017091442 0.003617896 g__Tidjanibacter 0.0016459637 0.005192887 g__Merdicola 0.0015982064 0.002962023 g__Lachnoclostridium_A 0.0014855570 0.003070051 g__Lacrimispora 0.0014491692 0.003818055 g__Murimonas 0.0012522702 0.003169218 g__Onthovicinus 0.0011673635 0.005220608 g__Bacteroides_G 0.0011628140 0.003033977 g__Emergencia 0.0011024918 0.002537585 g__Faecimonas 0.0010784396 0.002763385 g__MGBC101980 0.0010641277 0.003493127 g__Novisyntrophococcus 0.0010323253 0.002311560 g__CAZU01 0.0006122376 0.001950787 g__Limenecus 0.0004933441 0.002206302 genus_arrange &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=sum(relabun)) %&gt;% filter(genus != &quot;g__&quot;)%&gt;% arrange(-mean) %&gt;% select(genus) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) %&gt;% pull() genus_summary %&gt;% left_join(genome_metadata %&gt;% select(genus,phylum) %&gt;% unique(),by=join_by(genus==genus)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) %&gt;% filter(genus %in% genus_arrange[1:20]) %&gt;% mutate(genus=factor(genus,levels=rev(genus_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) + scale_color_manual(values=phylum_colors[-c(3,4,6,8)]) + geom_jitter(alpha=0.5) + facet_grid(.~type)+ theme_minimal() + labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) 5.3 Alpha diversity # Calculate Hill numbers richness &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 0) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(richness = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) neutral &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(neutral = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) phylogenetic &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, tree = genome_tree) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(phylogenetic = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) # Aggregate basal GIFT into elements dist &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% traits2dist(., method = &quot;gower&quot;) functional &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, dist = dist) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(functional = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) %&gt;% mutate(functional = if_else(is.nan(functional), 1, functional)) # Merge all metrics alpha_div &lt;- richness %&gt;% full_join(neutral, by = join_by(sample == sample)) %&gt;% full_join(phylogenetic, by = join_by(sample == sample)) %&gt;% full_join(functional, by = join_by(sample == sample)) alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% mutate(metric=factor(metric,levels=c(&quot;richness&quot;,&quot;neutral&quot;,&quot;phylogenetic&quot;,&quot;functional&quot;))) %&gt;% ggplot(aes(y = value, x = type, group=type, color=type, fill=type)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Sample type&quot;, breaks=c(&quot;cloaca&quot;,&quot;feces&quot;), labels=c(&quot;Cloaca&quot;,&quot;Faeces&quot;), values=c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;)) + scale_fill_manual(name=&quot;Sample type&quot;, breaks=c(&quot;cloaca&quot;,&quot;feces&quot;), labels=c(&quot;Cloaca&quot;,&quot;Faeces&quot;), values=c(&quot;#e5bd5b50&quot;, &quot;#6b739850&quot;)) + facet_wrap(. ~ metric, scales = &quot;free&quot;, ncol=4) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) alpha_div %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% lmerTest::lmer(richness ~ type + (1 | individual), data = ., REML = FALSE) %&gt;% broom.mixed::tidy() %&gt;% tt() tinytable_59yszvgg8l4zatpoclrc .table td.tinytable_css_rtsv8uekiaaljai5427a, .table th.tinytable_css_rtsv8uekiaaljai5427a { border-bottom: solid 0.1em #d3d8dc; } effect group term estimate std.error statistic df p.value fixed NA (Intercept) 1.600000 2.987725 0.5355245 20 5.981925e-01 fixed NA typefeces 61.300000 4.225281 14.5079106 20 4.444567e-12 ran_pars individual sd__(Intercept) 0.000000 NA NA NA NA ran_pars Residual sd__Observation 9.448016 NA NA NA NA alpha_div %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% lmerTest::lmer(neutral ~ type + (1 | individual), data = ., REML = FALSE) %&gt;% broom.mixed::tidy() %&gt;% tt() tinytable_c6mtd2jvl4krk9gncvtd .table td.tinytable_css_k5n065320ptfyc409bzb, .table th.tinytable_css_k5n065320ptfyc409bzb { border-bottom: solid 0.1em #d3d8dc; } effect group term estimate std.error statistic df p.value fixed NA (Intercept) 1.300518 1.359874 0.9563518 20 3.503127e-01 fixed NA typefeces 32.949885 1.923152 17.1332730 20 2.024047e-13 ran_pars individual sd__(Intercept) 0.000000 NA NA NA NA ran_pars Residual sd__Observation 4.300298 NA NA NA NA alpha_div %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% lmerTest::lmer(phylogenetic ~ type + (1 | individual), data = ., REML = FALSE) %&gt;% broom.mixed::tidy() %&gt;% tt() tinytable_6cfmm75opfqj0bvc2pge .table td.tinytable_css_6x453uga2mmfdp1zovep, .table th.tinytable_css_6x453uga2mmfdp1zovep { border-bottom: solid 0.1em #d3d8dc; } effect group term estimate std.error statistic df p.value fixed NA (Intercept) 1.238441e+00 0.2335543 5.302583 20 3.441968e-05 fixed NA typefeces 3.102674e+00 0.3302956 9.393626 20 8.961863e-09 ran_pars individual sd__(Intercept) 7.956710e-11 NA NA NA NA ran_pars Residual sd__Observation 7.385635e-01 NA NA NA NA alpha_div %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% lmerTest::lmer(functional ~ type + (1 | individual), data = ., REML = FALSE) %&gt;% broom.mixed::tidy() %&gt;% tt() tinytable_vtitqbrdrt8y6d80ew2v .table td.tinytable_css_1h7hjqiqsitzpx33dg86, .table th.tinytable_css_1h7hjqiqsitzpx33dg86 { border-bottom: solid 0.1em #d3d8dc; } effect group term estimate std.error statistic df p.value fixed NA (Intercept) 1.052834e+00 0.03546038 29.690432 20 5.139978e-18 fixed NA typefeces 4.136317e-01 0.05014855 8.248128 20 7.248330e-08 ran_pars individual sd__(Intercept) 2.443167e-11 NA NA NA NA ran_pars Residual sd__Observation 1.121356e-01 NA NA NA NA 5.4 Beta diversity beta_q0n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 0) beta_q1n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 1) beta_q1p &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 1, tree = genome_tree) beta_q1f &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% hillpair(., q = 1, dist = dist) #Richness betadisper(beta_q0n$C, sample_metadata$type) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 1 0.07339 0.073391 0.6442 999 0.435 Residuals 18 2.05080 0.113933 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) cloaca feces cloaca 0.443 feces 0.43268 adonis2(beta_q0n$C ~ type, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))), permutations = 999, strata = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))) %&gt;% pull(individual)) %&gt;% broom::tidy() %&gt;% tt() tinytable_9qhpftprnlox84ddlr5h .table td.tinytable_css_ichblcazv7lmmpfgx1sq, .table th.tinytable_css_ichblcazv7lmmpfgx1sq { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value type 1 3.005780 0.4664694 15.73752 0.002 Residual 18 3.437902 0.5335306 NA NA Total 19 6.443682 1.0000000 NA NA #Neutral diversity betadisper(beta_q1n$C, sample_metadata$type) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 1 0.01774 0.01774 0.1446 999 0.693 Residuals 18 2.20802 0.12267 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) cloaca feces cloaca 0.695 feces 0.70818 adonis2(beta_q1n$C ~ type, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))), permutations = 999, strata = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))) %&gt;% pull(individual)) %&gt;% broom::tidy() %&gt;% tt() tinytable_06efc6gf0wpzr5x24uek .table td.tinytable_css_se0jw13mbe27rfzd9h9j, .table th.tinytable_css_se0jw13mbe27rfzd9h9j { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value type 1 2.322537 0.362287 10.22586 0.002 Residual 18 4.088228 0.637713 NA NA Total 19 6.410765 1.000000 NA NA #Phylogenetic diversity betadisper(beta_q1p$C, sample_metadata$type) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 1 0.07195 0.071945 1.0792 999 0.345 Residuals 18 1.20001 0.066667 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) cloaca feces cloaca 0.417 feces 0.31264 adonis2(beta_q1p$C ~ type, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))), permutations = 999, strata = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))) %&gt;% pull(individual)) %&gt;% broom::tidy() %&gt;% tt() tinytable_5om7q9181d2hy5dbpca3 .table td.tinytable_css_pivkguihjl23zqhi96c4, .table th.tinytable_css_pivkguihjl23zqhi96c4 { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value type 1 2.893508 0.6789794 38.07116 0.002 Residual 18 1.368047 0.3210206 NA NA Total 19 4.261555 1.0000000 NA NA #Functional diversity betadisper(beta_q1f$C, sample_metadata$type) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 1 0.15953 0.159526 7.2962 999 0.013 * Residuals 18 0.39355 0.021864 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) cloaca feces cloaca 0.012 feces 0.014616 adonis2(beta_q1f$C ~ type, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))), permutations = 999, strata = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))) %&gt;% pull(individual)) %&gt;% broom::tidy() %&gt;% tt() tinytable_jmev2d1qxwtsajdfh9nk .table td.tinytable_css_khlczok7gbju3p5fiwhb, .table th.tinytable_css_khlczok7gbju3p5fiwhb { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value type 1 3.1347963 0.8009941 72.44958 0.002 Residual 18 0.7788359 0.1990059 NA NA Total 19 3.9136321 1.0000000 NA NA 5.4.1 Neutral diversity plot beta_q0n$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, verbosity = FALSE, trace=FALSE) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(type) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% mutate(individual=factor(individual, levels=c(&quot;Sg1&quot;,&quot;Sg2&quot;,&quot;Sg3&quot;,&quot;Sg4&quot;,&quot;Sg5&quot;,&quot;Sg6&quot;,&quot;Sg7&quot;,&quot;Sg8&quot;,&quot;Sg9&quot;,&quot;Sg10&quot;))) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = type, shape = individual)) + scale_color_manual(name=&quot;Sample type&quot;, breaks=c(&quot;cloaca&quot;,&quot;feces&quot;), labels=c(&quot;Cloaca&quot;,&quot;Faeces&quot;), values=c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;)) + scale_shape_manual(values = 1:10) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(shape=&quot;Individual&quot;) 5.4.2 Functional diversity plot beta_q1f$C %&gt;% vegan::metaMDS(., trymax = 500, k = 2, verbosity = FALSE, trace=FALSE) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(type) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% mutate(individual=factor(individual, levels=c(&quot;Sg1&quot;,&quot;Sg2&quot;,&quot;Sg3&quot;,&quot;Sg4&quot;,&quot;Sg5&quot;,&quot;Sg6&quot;,&quot;Sg7&quot;,&quot;Sg8&quot;,&quot;Sg9&quot;,&quot;Sg10&quot;))) %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = type)) + scale_color_manual(name=&quot;Sample type&quot;, breaks=c(&quot;cloaca&quot;,&quot;feces&quot;), labels=c(&quot;Cloaca&quot;,&quot;Faeces&quot;), values=c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;)) + scale_shape_manual(values = 1:10) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) "],["differential-abundance.html", "Chapter 6 Differential abundance 6.1 Create phyloseq object 6.2 Run ANCOMBC2", " Chapter 6 Differential abundance load(&quot;resources/data.Rdata&quot;) 6.1 Create phyloseq object # phyloseq object considering structual zeros phylo_samples &lt;- sample_metadata %&gt;% column_to_rownames(&quot;sample&quot;) %&gt;% sample_data() # convert to phyloseq sample_data object phylo_genome &lt;- genome_counts_filt %&gt;% column_to_rownames(&quot;genome&quot;) %&gt;% mutate_all(~ replace(., . == 0, 0.00001)) %&gt;% # add pseudo counts to avoid structural zero issues (note this approach can be improved!) %&gt;% mutate_all(~./sum(.)) %&gt;% #apply TSS nornalisation otu_table(., taxa_are_rows = TRUE) phylo_taxonomy &lt;- genome_metadata %&gt;% filter(genome %in% rownames(phylo_genome)) %&gt;% # remove structural zeros mutate(genome2 = genome) %&gt;% # create a pseudo genome name column column_to_rownames(&quot;genome2&quot;) %&gt;% dplyr::select(domain, phylum, class, order, family, genus, species, genome) %&gt;% # add an additional taxonomic level to ensure genome-level analysis (as no all genomes have species-level taxonomic assignments. Otherwise, ANCOMBC2 aggregates analyses per species) as.matrix() %&gt;% tax_table() # convert to phyloseq tax_table object phyloseq &lt;- phyloseq(phylo_genome, phylo_taxonomy, phylo_samples) 6.2 Run ANCOMBC2 6.2.1 MAG level differential_abundance &lt;- ancombc2( data = phyloseq, assay_name = &quot;counts&quot;, tax_level = NULL, # change to agglomerate analysis to a higher taxonomic range fix_formula = &quot;type&quot;, # fixed variable(s) rand_formula = &quot;(1|individual)&quot;, p_adj_method = &quot;holm&quot;, pseudo_sens = TRUE, prv_cut = 0, lib_cut = 0, s0_perc = 0.05, group = NULL, struc_zero = FALSE, neg_lb = FALSE, alpha = 0.05, n_cl = 2, verbose = TRUE, global = FALSE, pairwise = FALSE, dunnet = FALSE, trend = FALSE, iter_control = list(tol = 1e-5, max_iter = 20, verbose = FALSE), em_control = list(tol = 1e-5, max_iter = 100), lme_control = lme4::lmerControl(), mdfdr_control = list(fwer_ctrl_method = &quot;holm&quot;, B = 100), trend_control = NULL ) # Save differential abundance to data object save(sample_metadata, genome_metadata, read_counts, genome_counts, genome_counts_filt, genome_tree, genome_gifts, phylum_colors, data_stats, differential_abundance, file = &quot;resources/data.Rdata&quot;) tax &lt;- data.frame(phyloseq@tax_table) %&gt;% rownames_to_column(., &quot;taxon&quot;) differential_abundance_table &lt;- differential_abundance$res %&gt;% dplyr::select(genome=taxon, lfc_typefeces, p_typefeces) %&gt;% filter(p_typefeces &lt; 0.05) %&gt;% dplyr::arrange(p_typefeces) %&gt;% merge(., tax, by = &quot;genome&quot;) differential_abundance_table %&gt;% select(genome,order,phylum, lfc_typefeces, p_typefeces) %&gt;% tt() tinytable_aomm3b7ib1n281f6rql4 .table td.tinytable_css_vf3cqb8n02ax8xdzwznu, .table th.tinytable_css_vf3cqb8n02ax8xdzwznu { border-bottom: solid 0.1em #d3d8dc; } genome order phylum lfc_typefeces p_typefeces all:bin_000024 o__Selenomonadales p__Bacillota_C 4.678225 3.556000e-02 all:bin_000076 o__Bacteroidales p__Bacteroidota 5.375968 1.743752e-02 feces:bin_000019 o__Lachnospirales p__Bacillota_A 4.960703 1.407321e-02 feces:bin_000049 o__Bacteroidales p__Bacteroidota 5.240488 2.419249e-02 feces:bin_000066 o__Bacteroidales p__Bacteroidota 5.427702 1.063533e-02 feces:bin_000107 o__Bacteroidales p__Bacteroidota 5.034951 3.680645e-02 feces:bin_000114 o__Bacteroidales p__Bacteroidota 7.759443 4.169144e-05 Sg1:bin_000001 o__Enterobacterales p__Pseudomonadota -6.086702 3.377969e-02 Sg1:bin_000002 o__Bacteroidales p__Bacteroidota -4.855074 3.106069e-02 Sg1:bin_000003 o__Bacteroidales p__Bacteroidota 5.850958 6.260054e-03 Sg1:bin_000010 o__Verrucomicrobiales p__Verrucomicrobiota -4.870493 2.994023e-02 Sg1:bin_000015 o__Gastranaerophilales p__Cyanobacteriota -4.920420 2.656571e-02 Sg1:bin_000021 o__Bacteroidales p__Bacteroidota -4.922566 2.642784e-02 Sg10:bin_000001 o__Enterobacterales p__Pseudomonadota -7.012111 4.578780e-02 Sg10:bin_000009 o__Oscillospirales p__Bacillota_A -4.937513 3.899201e-02 Sg2:bin_000006 o__Bacteroidales p__Bacteroidota 5.779402 2.162388e-02 Sg3:bin_000001 o__Campylobacterales p__Campylobacterota -6.911601 2.834473e-02 Sg3:bin_000008 o__Verrucomicrobiales p__Verrucomicrobiota -4.897028 2.924217e-02 Sg4:bin_000004 o__Desulfovibrionales p__Desulfobacterota 6.891804 2.331371e-04 Sg6:bin_000002 o__Lachnospirales p__Bacillota_A 5.011067 3.919461e-02 Sg6:bin_000003 o__Lachnospirales p__Bacillota_A 5.537628 9.267341e-03 Sg9:bin_000004 o__Bacteroidales p__Bacteroidota 7.134700 3.313875e-03 Sg9:bin_000007 o__Bacteroidales p__Bacteroidota 6.976235 4.242228e-03 ggplot(differential_abundance_table, aes(x = forcats::fct_rev(genome), y = lfc_typefeces, color = phylum)) + geom_point(size = 3) + scale_color_manual(values = phylum_colors[-c(3,4)]) + geom_hline(yintercept = 0) + coord_flip() + facet_grid(phylum ~ ., scales = &quot;free&quot;, space = &quot;free&quot;) + theme( panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), axis.title.x = element_blank(), strip.background = element_blank(), strip.text = element_blank() ) + xlab(&quot;Genome&quot;) + ylab(&quot;log2FoldChange&quot;) + guides(col = guide_legend(&quot;Phylum&quot;)) differential_abundance$res %&gt;% na.omit() %&gt;% dplyr::select(genome=taxon, lfc_typefeces, p_typefeces) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% mutate(phylum = ifelse(p_typefeces &lt; 0.05, phylum, NA)) %&gt;% ggplot(., aes(x = lfc_typefeces, y = -log(p_typefeces), color = phylum)) + geom_point() + #xlim(c(-10,4)) + scale_color_manual(values = phylum_colors[-c(3,4)]) + labs(color = &quot;Significance&quot;, x = &quot;Log-fold difference between sample types&quot;, y = &quot;p-value&quot;) + theme_classic() 6.2.2 Genus level differential_abundance_genus &lt;- ancombc2( data = phyloseq, assay_name = &quot;counts&quot;, tax_level = &quot;genus&quot;, # change to agglomerate analysis to a higher taxonomic range fix_formula = &quot;type&quot;, # fixed variable(s) rand_formula = &quot;(1|individual)&quot;, p_adj_method = &quot;holm&quot;, pseudo_sens = TRUE, prv_cut = 0, lib_cut = 0, s0_perc = 0.05, group = NULL, struc_zero = FALSE, neg_lb = FALSE, alpha = 0.05, n_cl = 2, verbose = TRUE, global = FALSE, pairwise = FALSE, dunnet = FALSE, trend = FALSE, iter_control = list(tol = 1e-5, max_iter = 20, verbose = FALSE), em_control = list(tol = 1e-5, max_iter = 100), lme_control = lme4::lmerControl(), mdfdr_control = list(fwer_ctrl_method = &quot;holm&quot;, B = 100), trend_control = NULL ) # Save differential abundance to data object save(sample_metadata, genome_metadata, read_counts, genome_counts, genome_counts_filt, genome_tree, genome_gifts, phylum_colors, data_stats, differential_abundance, differential_abundance_genus, file = &quot;resources/data.Rdata&quot;) tax &lt;- data.frame(phyloseq@tax_table) %&gt;% rownames_to_column(., &quot;taxon&quot;) differential_abundance_genus$res %&gt;% filter(nchar(taxon) &gt; 5) %&gt;% dplyr::select(taxon=taxon, lfc_typefeces, p_typefeces) %&gt;% filter(p_typefeces &lt; 0.05) %&gt;% dplyr::arrange(lfc_typefeces) %&gt;% left_join(tax %&gt;% select(-c(taxon,genome,species)) %&gt;% unique(), by = join_by(taxon==genus)) %&gt;% tt() tinytable_1qwwks3a1ng9rtjxhew3 .table td.tinytable_css_84i9ochewb331ne2fdxy, .table th.tinytable_css_84i9ochewb331ne2fdxy { border-bottom: solid 0.1em #d3d8dc; } taxon lfc_typefeces p_typefeces domain phylum class order family g__Hafnia -7.012111 3.268748e-02 d__Bacteria p__Pseudomonadota c__Gammaproteobacteria o__Enterobacterales f__Enterobacteriaceae g__Salmonella -6.086702 1.837262e-02 d__Bacteria p__Pseudomonadota c__Gammaproteobacteria o__Enterobacterales f__Enterobacteriaceae g__Onthovicinus -4.937513 1.551107e-02 d__Bacteria p__Bacillota_A c__Clostridia o__Oscillospirales f__Acutalibacteraceae g__Limenecus -4.920420 7.128674e-03 d__Bacteria p__Cyanobacteriota c__Vampirovibrionia o__Gastranaerophilales f__Gastranaerophilaceae g__Anaerotruncus -4.811549 3.874874e-02 d__Bacteria p__Bacillota_A c__Clostridia o__Oscillospirales f__Ruminococcaceae g__Lawsonibacter 3.482235 4.253668e-02 d__Bacteria p__Bacillota_A c__Clostridia o__Oscillospirales f__Oscillospiraceae g__Hungatella 4.344792 2.289275e-02 d__Bacteria p__Bacillota_A c__Clostridia o__Lachnospirales f__Lachnospiraceae g__Akkermansia 5.197450 1.585097e-06 d__Bacteria p__Verrucomicrobiota c__Verrucomicrobiae o__Verrucomicrobiales f__Akkermansiaceae g__Clostridium_Q 5.261332 1.892609e-03 d__Bacteria p__Bacillota_A c__Clostridia o__Lachnospirales f__Lachnospiraceae g__Odoribacter 5.646793 1.364548e-06 d__Bacteria p__Bacteroidota c__Bacteroidia o__Bacteroidales f__Marinifilaceae g__Acetatifactor 5.709236 3.545806e-06 d__Bacteria p__Bacillota_A c__Clostridia o__Lachnospirales f__Lachnospiraceae g__Enterocloster 5.802455 1.348610e-04 d__Bacteria p__Bacillota_A c__Clostridia o__Lachnospirales f__Lachnospiraceae g__OM05-12 5.883081 4.942230e-07 d__Bacteria p__Bacteroidota c__Bacteroidia o__Bacteroidales f__Bacteroidaceae g__Eisenbergiella 6.066911 6.761798e-07 d__Bacteria p__Bacillota_A c__Clostridia o__Lachnospirales f__Lachnospiraceae g__Alistipes 6.156010 2.493252e-05 d__Bacteria p__Bacteroidota c__Bacteroidia o__Bacteroidales f__Rikenellaceae g__Bilophila 6.350192 1.319505e-06 d__Bacteria p__Desulfobacterota c__Desulfovibrionia o__Desulfovibrionales f__Desulfovibrionaceae g__Phocaeicola 6.384248 8.842193e-04 d__Bacteria p__Bacteroidota c__Bacteroidia o__Bacteroidales f__Bacteroidaceae g__Parabacteroides 6.393685 3.758112e-07 d__Bacteria p__Bacteroidota c__Bacteroidia o__Bacteroidales f__Tannerellaceae g__Bacteroides 6.522811 5.553197e-04 d__Bacteria p__Bacteroidota c__Bacteroidia o__Bacteroidales f__Bacteroidaceae g__Ventrimonas 6.824415 3.245688e-07 d__Bacteria p__Bacillota_A c__Clostridia o__Lachnospirales f__Lachnospiraceae 6.2.3 Phylum level differential_abundance_phylum &lt;- ancombc2( data = phyloseq, assay_name = &quot;counts&quot;, tax_level = &quot;phylum&quot;, # change to agglomerate analysis to a higher taxonomic range fix_formula = &quot;type&quot;, # fixed variable(s) rand_formula = &quot;(1|individual)&quot;, p_adj_method = &quot;holm&quot;, pseudo_sens = TRUE, prv_cut = 0, lib_cut = 0, s0_perc = 0.05, group = NULL, struc_zero = FALSE, neg_lb = FALSE, alpha = 0.05, n_cl = 2, verbose = TRUE, global = FALSE, pairwise = FALSE, dunnet = FALSE, trend = FALSE, iter_control = list(tol = 1e-5, max_iter = 20, verbose = FALSE), em_control = list(tol = 1e-5, max_iter = 100), lme_control = lme4::lmerControl(), mdfdr_control = list(fwer_ctrl_method = &quot;holm&quot;, B = 100), trend_control = NULL ) # Save differential abundance to data object save(sample_metadata, genome_metadata, read_counts, genome_counts, genome_counts_filt, genome_tree, genome_gifts, phylum_colors, data_stats, differential_abundance, differential_abundance_genus, differential_abundance_phylum, file = &quot;resources/data.Rdata&quot;) differential_abundance_phylum_table &lt;- differential_abundance_phylum$res %&gt;% dplyr::select(taxon=taxon, lfc_typefeces, p_typefeces) %&gt;% #filter(p_typefeces &lt; 0.05) %&gt;% dplyr::arrange(lfc_typefeces) phylum_colors2 &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% left_join(differential_abundance_phylum_table, by=join_by(phylum == taxon)) %&gt;% arrange(match(phylum, differential_abundance_phylum_table$taxon)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% select(colors) %&gt;% pull() differential_abundance_phylum_table %&gt;% filter(p_typefeces &lt; 0.05) %&gt;% dplyr::arrange(lfc_typefeces) %&gt;% tt() tinytable_r5e46glcawj0vsrijsvr .table td.tinytable_css_dbhm873i8352k458o9jg, .table th.tinytable_css_dbhm873i8352k458o9jg { border-bottom: solid 0.1em #d3d8dc; } taxon lfc_typefeces p_typefeces p__Campylobacterota -6.911601 1.700822e-02 p__Pseudomonadota -6.284413 2.017873e-02 p__Cyanobacteriota -4.920420 7.244201e-03 p__Bacillota_C 4.678225 1.119498e-02 p__Verrucomicrobiota 5.197450 1.827898e-06 p__Bacillota_A 5.388425 1.184674e-03 p__Bacteroidota 5.765525 7.008059e-04 p__Desulfobacterota 6.168047 1.160127e-06 differential_abundance_phylum_table %&gt;% mutate(taxon=factor(taxon,levels=differential_abundance_phylum_table$taxon)) %&gt;% ggplot(aes(x = lfc_typefeces, y = forcats::fct_rev(taxon), fill = taxon)) + geom_col(size = 2) + scale_fill_manual(values = phylum_colors2) + geom_hline(yintercept = 0) + geom_vline(xintercept = 4, linetype=&quot;dashed&quot;, color = &quot;grey&quot;, size=1) + geom_vline(xintercept = -4, linetype=&quot;dashed&quot;, color = &quot;grey&quot;, size=1) + theme( panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), axis.title.x = element_blank(), strip.background = element_blank(), strip.text = element_blank() ) + labs(x=&quot;log2FoldChange&quot;, y=&quot;Phylum&quot;) "],["functional-differences.html", "Chapter 7 Functional differences 7.1 Function level 7.2 Element level", " Chapter 7 Functional differences load(&quot;resources/data.Rdata&quot;) # Aggregate bundle-level GIFTs into the compound level GIFTs_elements &lt;- to.elements(genome_gifts, GIFT_db) GIFTs_elements_filtered &lt;- GIFTs_elements[rownames(GIFTs_elements) %in% genome_counts$genome, ] GIFTs_elements_filtered &lt;- as.data.frame(GIFTs_elements_filtered) %&gt;% select_if(~ !is.numeric(.) || sum(.) != 0) elements &lt;- GIFTs_elements_filtered %&gt;% as.data.frame() # Aggregate element-level GIFTs into the function level GIFTs_functions &lt;- to.functions(GIFTs_elements_filtered, GIFT_db) functions &lt;- GIFTs_functions %&gt;% as.data.frame() # Aggregate function-level GIFTs into overall Biosynthesis, Degradation and Structural GIFTs GIFTs_domains &lt;- to.domains(GIFTs_functions, GIFT_db) domains &lt;- GIFTs_domains %&gt;% as.data.frame() # Get community-weighed average GIFTs per sample GIFTs_elements_community &lt;- to.community(GIFTs_elements_filtered, genome_counts %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% tss(), GIFT_db) GIFTs_functions_community &lt;- to.community(GIFTs_functions, genome_counts %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% tss(), GIFT_db) GIFTs_domains_community &lt;- to.community(GIFTs_domains, genome_counts %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% tss(), GIFT_db) 7.1 Function level GIFTs_functions_community %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;sample&quot;) %&gt;% pivot_longer(!sample,names_to=&quot;trait&quot;,values_to=&quot;gift&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% ggplot(aes(x=trait,y=sample,fill=gift)) + geom_tile(colour=&quot;white&quot;, size=0.2)+ scale_fill_gradientn(colours=rev(c(&quot;#d53e4f&quot;, &quot;#f46d43&quot;, &quot;#fdae61&quot;, &quot;#fee08b&quot;, &quot;#e6f598&quot;, &quot;#abdda4&quot;, &quot;#ddf1da&quot;)))+ facet_grid(type ~ ., scales=&quot;free&quot;,space=&quot;free&quot;) 7.1.1 GIFT test GIFTs_functions_community_tt &lt;- GIFTs_functions_community %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;sample&quot;) %&gt;% separate(sample, into = c(&quot;individual&quot;, &quot;type&quot;), sep = &quot;\\\\.&quot;) %&gt;% pivot_longer(-c(individual, type), names_to = &quot;trait&quot;, values_to = &quot;value&quot;) %&gt;% group_by(trait) %&gt;% mutate(model_result = list(lmerTest::lmer(value ~ type + (1 | individual)))) %&gt;% ungroup() %&gt;% select(trait,model_result) %&gt;% unique() %&gt;% mutate(estimate = map_dbl(model_result, ~broom.mixed::tidy(.) %&gt;% filter(term == &quot;typefeces&quot;) %&gt;% pull(estimate))) %&gt;% mutate(p_value = map_dbl(model_result, ~broom.mixed::tidy(.) %&gt;% filter(term == &quot;typefeces&quot;) %&gt;% pull(p.value))) %&gt;% mutate(p_value_adj = p.adjust(p_value, method = &quot;bonferroni&quot;)) %&gt;% left_join(GIFT_db %&gt;% select(Code_function,Function) %&gt;% unique(),by=join_by(trait==Code_function)) %&gt;% rename(id=trait,trait=Function) %&gt;% select(id,trait, estimate, p_value_adj) GIFTs_functions_community_tt %&gt;% tt() |&gt; style_tt( i = which(GIFTs_functions_community_tt$estimate &lt; 0 &amp; GIFTs_functions_community_tt$p_value_adj &lt; 0.05), background = &quot;#E5D5B1&quot;) |&gt; style_tt( i = which(GIFTs_functions_community_tt$estimate &gt; 0 &amp; GIFTs_functions_community_tt$p_value_adj &lt; 0.05), background = &quot;#B7BCCE&quot;) tinytable_uvvt5h093qguzz8ugp61 .table td.tinytable_css_of3pe4sphz3fl7b4uti2, .table th.tinytable_css_of3pe4sphz3fl7b4uti2 { border-bottom: solid 0.1em #d3d8dc; } .table td.tinytable_css_u4s06jvkafe001kqalwt, .table th.tinytable_css_u4s06jvkafe001kqalwt { background-color: #E5D5B1; } .table td.tinytable_css_ejv57i9n5mr5fz3bdlei, .table th.tinytable_css_ejv57i9n5mr5fz3bdlei { background-color: #B7BCCE; } id trait estimate p_value_adj B01 Nucleic acid biosynthesis -0.1239096120 0.0789632267 B02 Amino acid biosynthesis -0.0804948274 1.0000000000 B03 Amino acid derivative biosynthesis 0.0007016942 1.0000000000 B04 SCFA biosynthesis -0.0816375152 0.2029465396 B06 Organic anion biosynthesis -0.1260870825 0.0000726699 B07 Vitamin biosynthesis -0.2291795852 0.0052439519 B08 Aromatic compound biosynthesis -0.0427342818 1.0000000000 B09 Metallophore biosynthesis 0.0218478800 0.0001954785 B10 Antibiotic biosynthesis 0.0147647263 0.0005469608 D01 Lipid degradation 0.0169045716 1.0000000000 D02 Polysaccharide degradation 0.1841580818 0.0385978704 D03 Sugar degradation 0.1349845189 0.0579566482 D05 Amino acid degradation -0.0585858599 0.0853328157 D06 Nitrogen compound degradation 0.0599820612 0.0085217728 D07 Alcohol degradation -0.0296476599 1.0000000000 D08 Xenobiotic degradation 0.0127910880 0.0758716036 D09 Antibiotic degradation -0.0300866841 1.0000000000 S01 Cellular structure -0.0713222899 1.0000000000 S02 Appendages -0.0128764080 1.0000000000 S03 Spore 0.0227568436 1.0000000000 7.1.2 GIFT test visualisation GIFTs_functions_community %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;sample&quot;) %&gt;% separate(sample, into = c(&quot;individual&quot;, &quot;type&quot;), sep = &quot;\\\\.&quot;) %&gt;% pivot_longer(-c(individual, type), names_to = &quot;trait&quot;, values_to = &quot;value&quot;) %&gt;% mutate(trait = case_when( trait %in% GIFT_db$Code_function ~ GIFT_db$Function[match(trait, GIFT_db$Code_function)], TRUE ~ trait )) %&gt;% mutate(trait=factor(trait,levels=unique(GIFT_db$Function))) %&gt;% ggplot(aes(x=value, y=type, group=type, fill=type, color=type)) + geom_boxplot() + scale_color_manual(name=&quot;Sample type&quot;, breaks=c(&quot;cloaca&quot;,&quot;feces&quot;), labels=c(&quot;Cloaca&quot;,&quot;Faeces&quot;), values=c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;)) + scale_fill_manual(name=&quot;Sample type&quot;, breaks=c(&quot;cloaca&quot;,&quot;feces&quot;), labels=c(&quot;Cloaca&quot;,&quot;Faeces&quot;), values=c(&quot;#e5bd5b50&quot;, &quot;#6b739850&quot;)) + facet_grid(trait ~ ., space=&quot;free&quot;, scales=&quot;free&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), strip.text.y = element_text(angle = 0)) + labs(y=&quot;Traits&quot;,x=&quot;Metabolic capacity index&quot;) 7.2 Element level GIFTs_elements_community %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;sample&quot;) %&gt;% pivot_longer(!sample,names_to=&quot;trait&quot;,values_to=&quot;gift&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% mutate(functionid = substr(trait, 1, 3)) %&gt;% mutate(trait = case_when( trait %in% GIFT_db$Code_element ~ GIFT_db$Element[match(trait, GIFT_db$Code_element)], TRUE ~ trait )) %&gt;% mutate(functionid = case_when( functionid %in% GIFT_db$Code_function ~ GIFT_db$Function[match(functionid, GIFT_db$Code_function)], TRUE ~ functionid )) %&gt;% mutate(trait=factor(trait,levels=unique(GIFT_db$Element))) %&gt;% mutate(functionid=factor(functionid,levels=unique(GIFT_db$Function))) %&gt;% ggplot(aes(x=sample,y=trait,fill=gift)) + geom_tile(colour=&quot;white&quot;, linewidth=0.2)+ scale_fill_gradientn(colours=rev(c(&quot;#d53e4f&quot;, &quot;#f46d43&quot;, &quot;#fdae61&quot;, &quot;#fee08b&quot;, &quot;#e6f598&quot;, &quot;#abdda4&quot;, &quot;#ddf1da&quot;)))+ facet_grid(functionid ~ type, scales=&quot;free&quot;,space=&quot;free&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), strip.text.y = element_text(angle = 0)) + labs(y=&quot;Traits&quot;,x=&quot;Samples&quot;,fill=&quot;GIFT&quot;) 7.2.1 GIFT test GIFTs_elements_community_tt &lt;- GIFTs_elements_community %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;sample&quot;) %&gt;% separate(sample, into = c(&quot;individual&quot;, &quot;type&quot;), sep = &quot;\\\\.&quot;) %&gt;% pivot_longer(-c(individual, type), names_to = &quot;trait&quot;, values_to = &quot;value&quot;) %&gt;% group_by(trait) %&gt;% mutate(model_result = list(lmerTest::lmer(value ~ type + (1 | individual)))) %&gt;% ungroup() %&gt;% select(trait,model_result) %&gt;% unique() %&gt;% mutate(estimate = map_dbl(model_result, ~broom.mixed::tidy(.) %&gt;% filter(term == &quot;typefeces&quot;) %&gt;% pull(estimate))) %&gt;% mutate(p_value = map_dbl(model_result, ~broom.mixed::tidy(.) %&gt;% filter(term == &quot;typefeces&quot;) %&gt;% pull(p.value))) %&gt;% mutate(p_value_adj = p.adjust(p_value, method = &quot;bonferroni&quot;)) %&gt;% left_join(GIFT_db %&gt;% select(Code_element,Element) %&gt;% unique(),by=join_by(trait==Code_element)) %&gt;% rename(id=trait,trait=Element) %&gt;% select(id,trait, estimate, p_value_adj) GIFTs_elements_community_tt %&gt;% tt() |&gt; style_tt( i = which(GIFTs_elements_community_tt$estimate &lt; 0 &amp; GIFTs_elements_community_tt$p_value_adj &lt; 0.05), background = &quot;#E5D5B1&quot;) |&gt; style_tt( i = which(GIFTs_elements_community_tt$estimate &gt; 0 &amp; GIFTs_elements_community_tt$p_value_adj &lt; 0.05), background = &quot;#B7BCCE&quot;) tinytable_0qt9e4y12qvhivynx4g1 .table td.tinytable_css_e2mkxtbfo7grdvct4peg, .table th.tinytable_css_e2mkxtbfo7grdvct4peg { border-bottom: solid 0.1em #d3d8dc; } .table td.tinytable_css_2fy4pml20dl0bbqsicu7, .table th.tinytable_css_2fy4pml20dl0bbqsicu7 { background-color: #E5D5B1; } .table td.tinytable_css_a3r4onr3sr3un982q0b8, .table th.tinytable_css_a3r4onr3sr3un982q0b8 { background-color: #B7BCCE; } id trait estimate p_value_adj B0101 Inosinic acid (IMP) -0.126554932 8.709660e-03 B0102 Uridylic acid (UMP) -0.074805024 1.000000e+00 B0103 UDP/UTP -0.059803944 1.860094e-03 B0104 CDP/CTP -0.225068834 4.598925e-01 B0105 ADP/ATP -0.177480115 9.505044e-02 B0106 GDP/GTP -0.079744822 1.000000e+00 B0204 Serine -0.354858798 8.260433e-03 B0205 Threonine -0.043036376 1.000000e+00 B0206 Cysteine -0.018948122 1.000000e+00 B0207 Methionine -0.045492617 1.000000e+00 B0208 Valine -0.067754019 1.000000e+00 B0209 Isoleucine -0.098451818 1.000000e+00 B0210 Leucine -0.252634408 3.014443e-02 B0211 Lysine -0.154928290 3.569786e-03 B0212 Arginine -0.074937843 1.000000e+00 B0213 Proline 0.072061854 1.000000e+00 B0214 Glutamate -0.163945870 1.000000e+00 B0215 Histidine -0.110770104 1.000000e+00 B0216 Tryptophan -0.155321081 1.000000e+00 B0217 Phenylalanine 0.090352396 3.522676e-02 B0218 Tyrosine -0.054738887 1.000000e+00 B0219 GABA 0.008944378 2.802439e-03 B0220 Beta-alanine 0.052000478 1.000000e+00 B0221 Ornithine -0.016921240 1.000000e+00 B0302 Betaine 0.006282259 1.040129e-01 B0303 Ectoine -0.061541292 1.000000e+00 B0307 Spermidine 0.024558839 1.000000e+00 B0309 Putrescine 0.022257358 7.703042e-03 B0310 Tryptamine 0.006370743 1.000000e+00 B0401 Acetate -0.072824075 1.000000e+00 B0402 Butyrate -0.085591608 1.000000e+00 B0403 Propionate -0.084124407 8.360457e-02 B0601 Succinate -0.218863703 2.909610e-03 B0602 Fumarate -0.152091312 9.695782e-03 B0603 Citrate -0.113302238 1.046572e-01 B0604 L-lactate 0.173827523 1.000000e+00 B0605 D-lactate 0.117659039 1.000000e+00 B0701 Thiamine (B1) -0.423569978 1.506470e-03 B0702 Riboflavin (B2) -0.123343077 1.000000e+00 B0703 Niacin (B3) -0.132343743 3.309870e-04 B0704 Pantothenate (B5) -0.161771233 1.000000e+00 B0705 Pyridoxal-P (B6) -0.157391209 1.000000e+00 B0706 Biotin (B7) -0.465333529 1.170382e-03 B0707 Tetrahydrofolate (B9) -0.157663922 2.041897e-01 B0708 Cobalamin (B12) -0.306856794 1.202664e-05 B0709 Tocopherol/tocotorienol (E) 0.046795745 6.297584e-03 B0710 Phylloquinone (K1) 0.003715408 1.000000e+00 B0711 Menaquinone (K2) -0.085362182 9.658381e-02 B0712 Ubiquinone (Q10) -0.033784932 1.332460e-04 B0801 Salicylate 0.004296057 1.000000e+00 B0802 Gallate -0.016400034 1.000000e+00 B0803 Chorismate -0.160193050 5.298927e-01 B0804 Dipicolinate -0.136859458 1.000000e+00 B0805 Indole-3-acetate 0.031893097 1.000000e+00 B0901 Staphyloferrin 0.030119095 3.151489e-03 B0902 Aerobactin 0.004219423 1.000000e+00 B0903 Staphylopine 0.024019936 4.654771e-02 B1004 Bacilysin -0.018245005 8.344534e-02 B1012 Fosfomycin 0.037752023 4.213150e-04 B1014 Kanosamine 0.003484397 1.000000e+00 B1028 Pyocyanin 0.031056273 2.227210e-04 D0101 Triglyceride 0.058936892 5.062892e-03 D0102 Fatty acid -0.015195375 1.000000e+00 D0103 Oleate 0.013778887 1.000000e+00 D0104 Dicarboxylic acids -0.031934437 1.000000e+00 D0201 Cellulose 0.112847616 1.522662e-02 D0202 Xyloglucan 0.157396459 1.248570e-01 D0203 Starch 0.160575521 1.000000e+00 D0204 Chitin 0.043775661 1.000000e+00 D0205 Pectin 0.145232275 9.916554e-03 D0206 Alpha galactan 0.311924825 1.000000e+00 D0207 Beta-galactan 0.279649459 1.000000e+00 D0208 Mixed-Linkage glucans 0.141291114 1.000000e+00 D0209 Xylans 0.220702518 4.624543e-03 D0210 Beta-mannan 0.178322073 4.991821e-02 D0211 Alpha-mannan 0.108240476 6.183472e-05 D0212 Arabinan 0.309047488 8.273962e-06 D0213 Mucin 0.225049579 8.345230e-01 D0301 Lactose 0.021559174 1.507361e-01 D0302 Sucrose 0.174986075 2.201890e-02 D0303 D-Apiose 0.001427278 1.000000e+00 D0304 D-Arabinose 0.115589119 1.000000e+00 D0305 D-Mannose -0.079588186 3.983501e-01 D0306 D-Xylose 0.221369683 2.208707e-03 D0307 L-Fucose 0.170884929 6.163796e-02 D0308 L-Rhamnose 0.169830701 1.000000e+00 D0309 Galactose 0.091292663 1.000000e+00 D0310 NeuAc 0.190156475 1.000000e+00 D0501 Serine -0.227261093 1.075226e-02 D0502 Threonine -0.146130577 1.000000e+00 D0503 Cysteine 0.011476506 3.580973e-04 D0504 Methionine 0.002940103 1.000000e+00 D0505 Valine -0.089366059 1.000000e+00 D0506 Isoleucine -0.059930930 3.268242e-02 D0507 Leucine -0.009430230 1.000000e+00 D0508 Lysine 0.029159728 5.701031e-03 D0509 Arginine 0.011052972 1.000000e+00 D0510 Proline 0.021476918 1.000000e+00 D0511 Glutamate -0.119388065 1.000000e+00 D0512 Histidine -0.167185365 1.000000e+00 D0513 Tryptophan -0.320056980 1.000000e+00 D0516 Beta-alanine -0.177656539 1.000000e+00 D0517 Ornithine 0.009547172 2.999024e-01 D0518 GABA 0.016842120 1.000000e+00 D0601 Nitrate -0.026422753 1.000000e+00 D0602 Urea 0.142800526 1.265787e-04 D0603 Urate 0.004540184 6.697284e-01 D0604 GlcNAc 0.372879440 5.877157e-02 D0606 Allantoin 0.051014205 3.766753e-01 D0607 Creatinine 0.031711336 8.365380e-02 D0609 L-carnitine 0.126172089 2.697109e-03 D0610 Methylamine -0.054084816 1.000000e+00 D0611 Phenylethylamine 0.004023910 1.000000e+00 D0612 Hypotaurine 0.014167003 1.000000e+00 D0613 Taurine 0.051963339 1.000000e+00 D0701 2,3-Butanediol 0.002997105 1.000000e+00 D0702 Ethanol -0.144734706 1.000000e+00 D0704 Glycerol 0.075558083 1.000000e+00 D0705 Propylene glycol -0.029295774 1.000000e+00 D0706 Ethylene glycol -0.211161601 4.261025e-01 D0708 Phytol -0.071779249 3.627745e-03 D0801 Toluene 0.001289127 1.000000e+00 D0802 Xylene 0.001289127 1.000000e+00 D0805 Benzoate 0.001083807 1.000000e+00 D0807 Catechol 0.026325954 1.000000e+00 D0815 Phthalate 0.004031937 1.000000e+00 D0816 Phenylacetate 0.023697091 1.000000e+00 D0817 Trans-cinnamate 0.041494948 9.945577e-04 D0901 Penicillin -0.221818680 1.000000e+00 D0902 Carbapenem 0.032819810 5.607652e-03 D0903 Cephalosporin 0.006989472 5.131141e-02 D0904 Oxacillin 0.005024446 9.111216e-01 D0905 Streptogramin -0.186670929 1.000000e+00 D0907 Tetracycline 0.398619606 4.510592e-03 D0908 Macrolide -0.114003199 1.000000e+00 D0910 Chloramphenicol -0.014452146 1.000000e+00 D0911 Lincosamide -0.177288537 1.000000e+00 S0101 Peptidoglycan -0.156833021 2.205558e-03 S0103 Teichoic acid -0.092594984 1.000000e+00 S0104 Lipoteichoic acid 0.073971060 1.000000e+00 S0105 Lipopolysaccharide -0.038194406 1.000000e+00 S0201 Flagellum -0.104812839 1.000000e+00 S0202 Pilus 0.048414546 1.415631e-03 S0301 Spore 0.022756844 1.000000e+00 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
