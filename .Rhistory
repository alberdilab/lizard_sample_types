betadisper(beta_q0n$C, sample_metadata$type) %>% permutest(., pairwise = TRUE) %>%
broom::tidy() %>%
tt()
betadisper(beta_q0n$C, sample_metadata$type) %>% permutest(., pairwise = TRUE)
# Base
library(R.utils)
library(knitr)
library(tidyverse)
library(devtools)
library(tinytable)
# For tree handling
library(ape)
library(phyloseq)
library(phytools)
# For plotting
library(ggplot2)
library(ggrepel)
library(ggpubr)
library(ggnewscale)
library(gridExtra)
library(ggtreeExtra)
library(ggtree)
library(ggh4x)
# For statistics
library(spaa)
library(vegan)
library(Rtsne)
library(geiger)
library(hilldiv2)
library(distillR)
library(ANCOMBC)
library(lme4)
load("resources/data.Rdata")
genome_counts_filt %>%
mutate_at(vars(-genome),~./sum(.)) %>% #apply TSS nornalisation
pivot_longer(-genome, names_to = "sample", values_to = "count") %>% #reduce to minimum number of columns
left_join(., genome_metadata, by = join_by(genome == genome)) %>% #append genome metadata
left_join(., sample_metadata, by = join_by(sample == sample)) %>% #append sample metadata
filter(count > 0) %>% #filter 0 counts
mutate(sample=factor(sample,levels=c("Sg1","Sg2","Sg3","Sg4","Sg5","Sg6","Sg7","Sg8","Sg9","Sg10"))) %>%
ggplot(., aes(x=sample,y=count, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units
geom_bar(stat="identity", colour="white", linewidth=0.1) + #plot stacked bars with white borders
scale_fill_manual(values=phylum_colors) +
facet_nested(. ~ individual,  scales="free") + #facet per day and treatment
guides(fill = guide_legend(ncol = 1)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(linewidth = 0.5, linetype = "solid", colour = "black")) +
labs(fill="Phylum",y = "Relative abundance",x="Samples")
genome_counts_filt %>%
mutate_at(vars(-genome),~./sum(.)) %>% #apply TSS nornalisation
pivot_longer(-genome, names_to = "sample", values_to = "count") %>% #reduce to minimum number of columns
left_join(., genome_metadata, by = join_by(genome == genome)) %>% #append genome metadata
left_join(., sample_metadata, by = join_by(sample == sample)) %>% #append sample metadata
filter(count > 0) %>% #filter 0 counts
mutate(sample=factor(sample,levels=c("Sg1","Sg2","Sg3","Sg4","Sg5","Sg6","Sg7","Sg8","Sg9","Sg10")))
genome_counts_filt %>%
mutate_at(vars(-genome),~./sum(.)) %>% #apply TSS nornalisation
pivot_longer(-genome, names_to = "sample", values_to = "count") %>% #reduce to minimum number of columns
left_join(., genome_metadata, by = join_by(genome == genome)) %>% #append genome metadata
left_join(., sample_metadata, by = join_by(sample == sample)) %>% #append sample metadata
filter(count > 0) %>% #filter 0 counts
mutate(sample=factor(sample,levels=c("Sg1","Sg2","Sg3","Sg4","Sg5","Sg6","Sg7","Sg8","Sg9","Sg10"))) %>%
ggplot(., aes(x=sample,y=count, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units
geom_bar(stat="identity", colour="white", linewidth=0.1) + #plot stacked bars with white borders
scale_fill_manual(values=phylum_colors) +
facet_nested(. ~ type + individual,  scales="free") + #facet per day and treatment
guides(fill = guide_legend(ncol = 1)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(linewidth = 0.5, linetype = "solid", colour = "black")) +
labs(fill="Phylum",y = "Relative abundance",x="Samples")
genome_counts_filt %>%
mutate_at(vars(-genome),~./sum(.)) %>% #apply TSS nornalisation
pivot_longer(-genome, names_to = "sample", values_to = "count") %>% #reduce to minimum number of columns
left_join(., genome_metadata, by = join_by(genome == genome)) %>% #append genome metadata
left_join(., sample_metadata, by = join_by(sample == sample)) %>% #append sample metadata
filter(count > 0) %>% #filter 0 counts
mutate(sample=factor(sample,levels=c("Sg1","Sg2","Sg3","Sg4","Sg5","Sg6","Sg7","Sg8","Sg9","Sg10"))) %>%
ggplot(., aes(x=sample,y=count, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units
geom_bar(stat="identity", colour="white", linewidth=0.1) + #plot stacked bars with white borders
scale_fill_manual(values=phylum_colors) +
facet_nested(. ~ individual + type,  scales="free") + #facet per day and treatment
guides(fill = guide_legend(ncol = 1)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(linewidth = 0.5, linetype = "solid", colour = "black")) +
labs(fill="Phylum",y = "Relative abundance",x="Samples")
genome_counts_filt %>%
mutate_at(vars(-genome),~./sum(.)) %>% #apply TSS nornalisation
pivot_longer(-genome, names_to = "sample", values_to = "count") %>% #reduce to minimum number of columns
left_join(., genome_metadata, by = join_by(genome == genome)) %>% #append genome metadata
left_join(., sample_metadata, by = join_by(sample == sample)) %>% #append sample metadata
filter(count > 0) %>% #filter 0 counts
mutate(individual=factor(individual,levels=c("Sg1","Sg2","Sg3","Sg4","Sg5","Sg6","Sg7","Sg8","Sg9","Sg10"))) %>%
ggplot(., aes(x=sample,y=count, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units
geom_bar(stat="identity", colour="white", linewidth=0.1) + #plot stacked bars with white borders
scale_fill_manual(values=phylum_colors) +
facet_nested(. ~ individual,  scales="free") + #facet per day and treatment
guides(fill = guide_legend(ncol = 1)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(linewidth = 0.5, linetype = "solid", colour = "black")) +
labs(fill="Phylum",y = "Relative abundance",x="Samples")
phylum_summary <- genome_counts_filt %>%
mutate_at(vars(-genome),~./sum(.)) %>% #apply TSS nornalisation
pivot_longer(-genome, names_to = "sample", values_to = "count") %>%
left_join(sample_metadata, by = join_by(sample == sample)) %>%
left_join(genome_metadata, by = join_by(genome == genome)) %>%
group_by(sample,phylum) %>%
summarise(relabun=sum(count))
phylum_arrange <- phylum_summary %>%
group_by(phylum) %>%
summarise(mean=mean(relabun)) %>%
arrange(-mean) %>%
select(phylum) %>%
pull()
phylum_summary %>%
group_by(phylum) %>%
summarise(mean=mean(relabun))
phylum_summary %>%
filter(phylum %in% phylum_arrange) %>%
mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %>%
ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum)) +
#scale_color_manual(values=c("#F4D9AE","#DE9E46","#2D8077","#CD4F41")) +
#geom_boxplot() +
geom_jitter(alpha=0.5) +
theme_minimal()
phylum_summary <- genome_counts_filt %>%
mutate_at(vars(-genome),~./sum(.)) %>% #apply TSS nornalisation
pivot_longer(-genome, names_to = "sample", values_to = "count") %>%
left_join(sample_metadata, by = join_by(sample == sample)) %>%
left_join(genome_metadata, by = join_by(genome == genome)) %>%
group_by(sample,phylum) %>%
summarise(relabun=sum(count))
phylum_arrange <- phylum_summary %>%
group_by(phylum) %>%
summarise(mean=mean(relabun)) %>%
arrange(-mean) %>%
select(phylum) %>%
pull()
phylum_summary %>%
group_by(phylum) %>%
summarise(mean=mean(relabun))
phylum_summary %>%
filter(phylum %in% phylum_arrange) %>%
mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %>%
ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum)) +
scale_color_manual(values=phylum_colors[-8]) +
#geom_boxplot() +
geom_jitter(alpha=0.5) +
theme_minimal()
phylum_summary <- genome_counts_filt %>%
mutate_at(vars(-genome),~./sum(.)) %>% #apply TSS nornalisation
pivot_longer(-genome, names_to = "sample", values_to = "count") %>%
left_join(sample_metadata, by = join_by(sample == sample)) %>%
left_join(genome_metadata, by = join_by(genome == genome)) %>%
group_by(sample,phylum) %>%
summarise(relabun=sum(count))
phylum_arrange <- phylum_summary %>%
group_by(phylum) %>%
summarise(mean=mean(relabun)) %>%
arrange(-mean) %>%
select(phylum) %>%
pull()
phylum_summary %>%
group_by(phylum) %>%
summarise(mean=mean(relabun))
phylum_summary %>%
filter(phylum %in% phylum_arrange) %>%
mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %>%
ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum)) +
scale_color_manual(values=phylum_colors) +
#geom_boxplot() +
geom_jitter(alpha=0.5) +
theme_minimal()
phylum_summary <- genome_counts_filt %>%
mutate_at(vars(-genome),~./sum(.)) %>% #apply TSS nornalisation
pivot_longer(-genome, names_to = "sample", values_to = "count") %>%
left_join(sample_metadata, by = join_by(sample == sample)) %>%
left_join(genome_metadata, by = join_by(genome == genome)) %>%
group_by(sample,phylum) %>%
summarise(relabun=sum(count))
phylum_arrange <- phylum_summary %>%
group_by(phylum) %>%
summarise(mean=mean(relabun)) %>%
arrange(-mean) %>%
select(phylum) %>%
pull()
phylum_summary %>%
group_by(phylum) %>%
summarise(mean=mean(relabun))
phylum_summary %>%
filter(phylum %in% phylum_arrange) %>%
mutate(phylum=factor(phylum,levels=phylum_arrange)) %>%
ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum)) +
scale_color_manual(values=phylum_colors) +
#geom_boxplot() +
geom_jitter(alpha=0.5) +
theme_minimal()
phylum_summary <- genome_counts_filt %>%
mutate_at(vars(-genome),~./sum(.)) %>% #apply TSS nornalisation
pivot_longer(-genome, names_to = "sample", values_to = "count") %>%
left_join(sample_metadata, by = join_by(sample == sample)) %>%
left_join(genome_metadata, by = join_by(genome == genome)) %>%
group_by(sample,phylum) %>%
summarise(relabun=sum(count))
phylum_arrange <- phylum_summary %>%
group_by(phylum) %>%
summarise(mean=mean(relabun)) %>%
arrange(-mean) %>%
select(phylum) %>%
pull()
phylum_summary %>%
group_by(phylum) %>%
summarise(mean=mean(relabun))
phylum_summary %>%
filter(phylum %in% phylum_arrange) %>%
mutate(phylum=factor(phylum,levels=phylum_arrange)) %>%
ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum)) +
scale_color_manual(values=phylum_colors) +
#geom_boxplot() +
geom_jitter(alpha=0.5) +
theme_minimal()
phylum_summary <- genome_counts_filt %>%
mutate_at(vars(-genome),~./sum(.)) %>% #apply TSS nornalisation
pivot_longer(-genome, names_to = "sample", values_to = "count") %>%
left_join(sample_metadata, by = join_by(sample == sample)) %>%
left_join(genome_metadata, by = join_by(genome == genome)) %>%
group_by(sample,phylum) %>%
summarise(relabun=sum(count))
phylum_arrange <- phylum_summary %>%
group_by(phylum) %>%
summarise(mean=mean(relabun)) %>%
arrange(-mean) %>%
select(phylum) %>%
pull()
phylum_summary %>%
group_by(phylum) %>%
summarise(mean=mean(relabun))
phylum_summary %>%
filter(phylum %in% phylum_arrange) %>%
mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %>%
ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum)) +
scale_color_manual(values=phylum_colors) +
#geom_boxplot() +
geom_jitter(alpha=0.5) +
theme_minimal()
phylum_colors
phylum_colors
phylum_colors %>%
setNames(., unique(phylum_colors$phylum))
phylum_colors <- read_tsv("https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv") %>%
right_join(genome_metadata, by=join_by(phylum == phylum)) %>%
arrange(match(genome, genome_tree$tip.label)) %>%
select(phylum, colors) %>%
unique() %>%
arrange(phylum) %>%
pull(colors, name=phylum)
phylum_colors
rev(phylum_arrange)
phylum_summary <- genome_counts_filt %>%
mutate_at(vars(-genome),~./sum(.)) %>% #apply TSS nornalisation
pivot_longer(-genome, names_to = "sample", values_to = "count") %>%
left_join(sample_metadata, by = join_by(sample == sample)) %>%
left_join(genome_metadata, by = join_by(genome == genome)) %>%
group_by(sample,phylum) %>%
summarise(relabun=sum(count))
phylum_arrange <- phylum_summary %>%
group_by(phylum) %>%
summarise(mean=mean(relabun)) %>%
arrange(-mean) %>%
select(phylum) %>%
pull()
phylum_summary %>%
group_by(phylum) %>%
summarise(mean=mean(relabun))
phylum_summary %>%
filter(phylum %in% phylum_arrange) %>%
mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %>%
ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum)) +
scale_color_manual(values=phylum_colors[rev(phylum_arrange)]) +
#geom_boxplot() +
geom_jitter(alpha=0.5) +
theme_minimal()
genus_summary <- genome_counts_filt %>%
mutate_at(vars(-genome),~./sum(.)) %>% #apply TSS nornalisation
pivot_longer(-genome, names_to = "sample", values_to = "count") %>% #reduce to minimum number of columns
left_join(sample_metadata, by = join_by(sample == sample)) %>% #append sample metadata
left_join(genome_metadata, by = join_by(genome == genome)) %>% #append genome metadata
group_by(sample,genus) %>%
summarise(relabun=sum(count)) %>%
filter(genus != "g__")
genus_arrange <- genus_summary %>%
group_by(genus) %>%
summarise(mean=sum(relabun)) %>%
filter(genus != "g__")%>%
arrange(-mean) %>%
select(genus) %>%
mutate(genus= sub("^g__", "", genus)) %>%
pull()
genus_summary %>%
left_join(genome_metadata %>% select(genus,phylum) %>% unique(),by=join_by(genus==genus)) %>%
left_join(sample_metadata,by=join_by(sample==sample)) %>%
mutate(genus= sub("^g__", "", genus)) %>%
filter(genus %in% genus_arrange[1:20]) %>%
mutate(genus=factor(genus,levels=rev(genus_arrange[1:20]))) %>%
filter(relabun > 0) %>%
ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) +
scale_color_manual(values=phylum_colors[-c(3,4,6,8)]) +
#geom_boxplot() +
geom_jitter(alpha=0.5) +
facet_grid(.~type)+
theme_minimal()
betadisper(beta_q0n$C, sample_metadata$type) %>% permutest(., pairwise = TRUE)
beta_q0n <- genome_counts_filt %>%
column_to_rownames(., "genome") %>%
hillpair(., q = 0)
beta_q1n <- genome_counts_filt %>%
column_to_rownames(., "genome") %>%
hillpair(., q = 1)
beta_q1p <- genome_counts_filt %>%
column_to_rownames(., "genome") %>%
hillpair(., q = 1, tree = genome_tree)
beta_q1f <- genome_counts_filt %>%
column_to_rownames(., "genome") %>%
hillpair(., q = 1, dist = dist)
betadisper(beta_q0n$C, sample_metadata$type) %>% permutest(., pairwise = TRUE)
adonis2(beta_q0n$C ~ type,
data = sample_metadata %>% arrange(match(sample,labels(beta_q1n$C))),
permutations = 999,
strata = sample_metadata %>% arrange(match(sample,labels(beta_q1n$C))) %>% pull(individual)) %>%
broom::tidy() %>%
tt()
load("resources/data.Rdata")
load("resources/data.Rdata")
# phyloseq object considering structual zeros
phylo_samples <- sample_metadata %>%
column_to_rownames("sample") %>%
sample_data() # convert to phyloseq sample_data object
phylo_genome <- genome_counts_filt %>%
column_to_rownames("genome") %>%
mutate_all(~ replace(., . == 0, 0.00001)) %>% # add pseudo counts to avoid structural zero issues (note this approach can be improved!) %>%
mutate_all(~./sum(.)) %>% #apply TSS nornalisation
otu_table(., taxa_are_rows = TRUE)
phylo_taxonomy <- genome_metadata %>%
filter(genome %in% rownames(phylo_genome)) %>% # remove structural zeros
mutate(genome2 = genome) %>% # create a pseudo genome name column
column_to_rownames("genome2") %>%
dplyr::select(domain, phylum, class, order, family, genus, species, genome) %>% # add an additional taxonomic level to ensure genome-level analysis (as no all genomes have species-level taxonomic assignments. Otherwise, ANCOMBC2 aggregates analyses per species)
as.matrix() %>%
tax_table() # convert to phyloseq tax_table object
phyloseq <- phyloseq(phylo_genome, phylo_taxonomy, phylo_samples)
differential_abundance_genus <- ancombc2(
data = phyloseq,
assay_name = "counts",
tax_level = "genus", # change to agglomerate analysis to a higher taxonomic range
fix_formula = "type", # fixed variable(s)
rand_formula = "(1|individual)",
p_adj_method = "holm",
pseudo_sens = TRUE,
prv_cut = 0,
lib_cut = 0,
s0_perc = 0.05,
group = NULL,
struc_zero = FALSE,
neg_lb = FALSE,
alpha = 0.05,
n_cl = 2,
verbose = TRUE,
global = FALSE,
pairwise = FALSE,
dunnet = FALSE,
trend = FALSE,
iter_control = list(tol = 1e-5, max_iter = 20, verbose = FALSE),
em_control = list(tol = 1e-5, max_iter = 100),
lme_control = lme4::lmerControl(),
mdfdr_control = list(fwer_ctrl_method = "holm", B = 100),
trend_control = NULL
)
# Save differential abundance to data object
save(sample_metadata,
genome_metadata,
read_counts,
genome_counts,
genome_counts_filt,
genome_tree,
genome_gifts,
phylum_colors,
data_stats,
differential_abundance,
differential_abundance_genus,
file = "resources/data.Rdata")
differential_abundance_genus_table <- differential_abundance_genus$res %>%
dplyr::select(taxon=taxon, lfc_typefeces, p_typefeces) %>%
#filter(p_typefeces < 0.05) %>%
dplyr::arrange(lfc_typefeces)
phylum_colors2 <- read_tsv("https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv") %>%
left_join(differential_abundance_genus_table, by=join_by(genus == taxon)) %>%
arrange(match(phylum, differential_abundance_phylum_table$taxon)) %>%
select(phylum, colors) %>%
unique() %>%
select(colors) %>%
pull()
differential_abundance_genus_table
differential_abundance_genus_table %>%
mutate(taxon=factor(taxon,levels=differential_abundance_genus_table$taxon)) %>%
ggplot(aes(x = lfc_typefeces, y = forcats::fct_rev(taxon), fill = taxon)) +
geom_col(size = 2) +
scale_fill_manual(values = phylum_colors2) +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 4, linetype="dashed", color = "grey", size=1) +
geom_vline(xintercept = -4, linetype="dashed", color = "grey", size=1) +
theme(
panel.background = element_blank(),
axis.line = element_line(size = 0.5, linetype = "solid", colour = "black"),
axis.title.x = element_blank(),
strip.background = element_blank(),
strip.text = element_blank()
) +
labs(x="log2FoldChange", y="Phylum")
differential_abundance_genus_table %>%
mutate(taxon=factor(taxon,levels=differential_abundance_genus_table$taxon)) %>%
ggplot(aes(x = lfc_typefeces, y = forcats::fct_rev(taxon), fill = taxon)) +
geom_col(size = 2) +
scale_fill_manual(values = phylum_colors) +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 4, linetype="dashed", color = "grey", size=1) +
geom_vline(xintercept = -4, linetype="dashed", color = "grey", size=1) +
theme(
panel.background = element_blank(),
axis.line = element_line(size = 0.5, linetype = "solid", colour = "black"),
axis.title.x = element_blank(),
strip.background = element_blank(),
strip.text = element_blank()
) +
labs(x="log2FoldChange", y="Phylum")
differential_abundance_genus_table <- differential_abundance_genus$res %>%
dplyr::select(taxon=taxon, lfc_typefeces, p_typefeces) %>%
filter(p_typefeces < 0.05) %>%
dplyr::arrange(lfc_typefeces) %>%
merge(., tax, by = "genome")
tax <- data.frame(phyloseq@tax_table) %>%
rownames_to_column(., "taxon")
differential_abundance_genus_table <- differential_abundance_genus$res %>%
dplyr::select(taxon=taxon, lfc_typefeces, p_typefeces) %>%
filter(p_typefeces < 0.05) %>%
dplyr::arrange(lfc_typefeces) %>%
merge(., tax, by = "genome")
differential_abundance_genus
differential_abundance_genus$res %>%
dplyr::select(taxon=taxon, lfc_typefeces, p_typefeces)
differential_abundance_genus$res %>%
dplyr::select(taxon=taxon, lfc_typefeces, p_typefeces) %>%
filter(p_typefeces < 0.05) %>%
dplyr::arrange(lfc_typefeces)
differential_abundance_genus$res %>%
dplyr::select(taxon=taxon, lfc_typefeces, p_typefeces) %>%
filter(p_typefeces < 0.05) %>%
dplyr::arrange(lfc_typefeces) %>%
left_join(tax, by = join_by(taxon==genus))
differential_abundance_genus_table <- differential_abundance_genus$res %>%
dplyr::select(taxon=taxon, lfc_typefeces, p_typefeces) %>%
filter(p_typefeces < 0.05) %>%
dplyr::arrange(lfc_typefeces) %>%
left_join(tax %>% select(-taxon), by = join_by(taxon==genus))
differential_abundance_genus_table
differential_abundance_genus$res %>%
dplyr::select(taxon=taxon, lfc_typefeces, p_typefeces) %>%
filter(p_typefeces < 0.05)
differential_abundance_genus_table <- differential_abundance_genus$res %>%
dplyr::select(taxon=taxon, lfc_typefeces, p_typefeces) %>%
filter(p_typefeces < 0.05) %>%
dplyr::arrange(lfc_typefeces) %>%
left_join(tax %>% select(-c(taxon,species)) %>% unique(), by = join_by(taxon==genus))
differential_abundance_genus_table
differential_abundance_genus_table <- differential_abundance_genus$res %>%
dplyr::select(taxon=taxon, lfc_typefeces, p_typefeces) %>%
filter(p_typefeces < 0.05) %>%
dplyr::arrange(lfc_typefeces) %>%
left_join(tax %>% select(-c(taxon,genome,species)) %>% unique(), by = join_by(taxon==genus))
differential_abundance_genus_table
differential_abundance_genus_table <- differential_abundance_genus$res %>%
filter(nchar(taxon) > 5) %>%
dplyr::select(taxon=taxon, lfc_typefeces, p_typefeces) %>%
filter(p_typefeces < 0.05) %>%
dplyr::arrange(lfc_typefeces) %>%
left_join(tax %>% select(-c(taxon,genome,species)) %>% unique(), by = join_by(taxon==genus))
differential_abundance_genus_table
differential_abundance_genus_table <- differential_abundance_genus$res %>%
filter(nchar(taxon) > 5) %>%
dplyr::select(taxon=taxon, lfc_typefeces, p_typefeces) %>%
filter(p_typefeces < 0.05) %>%
dplyr::arrange(lfc_typefeces) %>%
left_join(tax %>% select(-c(taxon,genome,species)) %>% unique(), by = join_by(taxon==genus)) %>%
tt()
