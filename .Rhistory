mutate(
mag_proportion = if_else(singlem_read_fraction == 0, 0, mag_proportion),
singlem_read_fraction = if_else(singlem_read_fraction == 0, NA, singlem_read_fraction),
singlem_read_fraction = if_else(singlem_read_fraction < mag_proportion, NA, singlem_read_fraction),
singlem_read_fraction = if_else(singlem_read_fraction > 1, 1, singlem_read_fraction)
) %>%
pivot_longer(-sample, names_to = "proportion", values_to = "value") %>%
mutate(
proportion = factor(
proportion,
levels = c("mag_proportion", "singlem_read_fraction")
)
) %>%
ggplot(aes(x = value, y = sample, color = proportion)) +
geom_line(aes(group = sample), color = "#f8a538") +
geom_point() +
scale_color_manual(name="Proportion",
breaks=c("mag_proportion","singlem_read_fraction"),
labels=c("Recovered","Estimated"),
values=c("#52e1e8", "#876b53"))+
facet_wrap(tissue~, scales = "free", labeller = labeller(tissue = c(cloaca="Cloaca",feces="Faeces"))) +
data_stats %>%
mutate(
unmapped_reads = trimmed_reads - mapped_SceUnd - mapped_mags,
mag_proportion = mapped_mags / (mapped_mags + unmapped_reads),
singlem_read_fraction = singlem_read_fraction
) %>%
select(sample, mag_proportion, singlem_read_fraction) %>%
mutate(
mag_proportion = if_else(singlem_read_fraction == 0, 0, mag_proportion),
singlem_read_fraction = if_else(singlem_read_fraction == 0, NA, singlem_read_fraction),
singlem_read_fraction = if_else(singlem_read_fraction < mag_proportion, NA, singlem_read_fraction),
singlem_read_fraction = if_else(singlem_read_fraction > 1, 1, singlem_read_fraction)
) %>%
pivot_longer(-sample, names_to = "proportion", values_to = "value") %>%
mutate(
proportion = factor(
proportion,
levels = c("mag_proportion", "singlem_read_fraction")
)
) %>%
ggplot(aes(x = value, y = sample, color = proportion)) +
geom_line(aes(group = sample), color = "#f8a538") +
geom_point() +
scale_color_manual(name="Proportion",
breaks=c("mag_proportion","singlem_read_fraction"),
labels=c("Recovered","Estimated"),
values=c("#52e1e8", "#876b53"))+
facet_wrap(~tissue, scales = "free", labeller = labeller(tissue = c(cloaca="Cloaca",feces="Faeces"))) +
theme_classic() +
labs(y = "Samples", x = "Prokaryotic fraction") +
scale_x_continuous(limits = c(0, 1)) +
theme(
axis.text.x = element_text( angle = 90, vjust = 0.5, hjust = 1, size = 6),
legend.position = "right"
)
data_stats %>%
mutate(
unmapped_reads = trimmed_reads - mapped_SceUnd - mapped_mags,
mag_proportion = mapped_mags / (mapped_mags + unmapped_reads),
singlem_read_fraction = singlem_read_fraction
) %>%
select(sample, mag_proportion, singlem_read_fraction) %>%
mutate(
mag_proportion = if_else(singlem_read_fraction == 0, 0, mag_proportion),
singlem_read_fraction = if_else(singlem_read_fraction == 0, NA, singlem_read_fraction),
singlem_read_fraction = if_else(singlem_read_fraction < mag_proportion, NA, singlem_read_fraction),
singlem_read_fraction = if_else(singlem_read_fraction > 1, 1, singlem_read_fraction)
) %>%
pivot_longer(-sample, names_to = "proportion", values_to = "value") %>%
mutate(
proportion = factor(
proportion,
levels = c("mag_proportion", "singlem_read_fraction")
)
)
data_stats %>%
mutate(
unmapped_reads = trimmed_reads - mapped_SceUnd - mapped_mags,
mag_proportion = mapped_mags / (mapped_mags + unmapped_reads),
singlem_read_fraction = singlem_read_fraction
) %>%
select(sample, mag_proportion, singlem_read_fraction) %>%
mutate(
mag_proportion = if_else(singlem_read_fraction == 0, 0, mag_proportion),
singlem_read_fraction = if_else(singlem_read_fraction == 0, NA, singlem_read_fraction),
singlem_read_fraction = if_else(singlem_read_fraction < mag_proportion, NA, singlem_read_fraction),
singlem_read_fraction = if_else(singlem_read_fraction > 1, 1, singlem_read_fraction)
) %>%
pivot_longer(-sample, names_to = "proportion", values_to = "value") %>%
mutate(
proportion = factor(
proportion,
levels = c("mag_proportion", "singlem_read_fraction")
)
) %>%
separate(col = "sample", into = c("sample", "tissue"), sep = "\\.", remove = FALSE) %>%
ggplot(aes(x = value, y = sample, color = proportion)) +
geom_line(aes(group = sample), color = "#f8a538") +
geom_point() +
scale_color_manual(name="Proportion",
breaks=c("mag_proportion","singlem_read_fraction"),
labels=c("Recovered","Estimated"),
values=c("#52e1e8", "#876b53"))+
facet_wrap(~tissue, scales = "free", labeller = labeller(tissue = c(cloaca="Cloaca",feces="Faeces"))) +
theme_classic() +
labs(y = "Samples", x = "Prokaryotic fraction") +
scale_x_continuous(limits = c(0, 1)) +
theme(
axis.text.x = element_text( angle = 90, vjust = 0.5, hjust = 1, size = 6),
legend.position = "right"
)
data_stats %>%
mutate(
unmapped_reads = trimmed_reads - mapped_SceUnd - mapped_mags,
mag_proportion = mapped_mags / (mapped_mags + unmapped_reads),
singlem_read_fraction = singlem_read_fraction
) %>%
select(sample, mag_proportion, singlem_read_fraction) %>%
mutate(
mag_proportion = if_else(singlem_read_fraction == 0, 0, mag_proportion),
singlem_read_fraction = if_else(singlem_read_fraction == 0, NA, singlem_read_fraction),
singlem_read_fraction = if_else(singlem_read_fraction < mag_proportion, NA, singlem_read_fraction),
singlem_read_fraction = if_else(singlem_read_fraction > 1, 1, singlem_read_fraction)
) %>%
pivot_longer(-sample, names_to = "proportion", values_to = "value") %>%
mutate(
proportion = factor(
proportion,
levels = c("mag_proportion", "singlem_read_fraction")
)
) %>%
separate(col = "sample", into = c("sample", "tissue"), sep = "\\.", remove = FALSE) %>%
ggplot(aes(x = value, y = sample, color = proportion)) +
geom_line(aes(group = sample), color = "#f8a538") +
geom_point() +
scale_color_manual(name="Proportion",
breaks=c("mag_proportion","singlem_read_fraction"),
labels=c("Recovered","Estimated"),
values=c("#52e1e8", "#876b53"))+
facet_wrap(tissue~, scales = "free", labeller = labeller(tissue = c(cloaca="Cloaca",feces="Faeces"))) +
data_stats %>%
mutate(
unmapped_reads = trimmed_reads - mapped_SceUnd - mapped_mags,
mag_proportion = mapped_mags / (mapped_mags + unmapped_reads),
singlem_read_fraction = singlem_read_fraction
) %>%
select(sample, mag_proportion, singlem_read_fraction) %>%
mutate(
mag_proportion = if_else(singlem_read_fraction == 0, 0, mag_proportion),
singlem_read_fraction = if_else(singlem_read_fraction == 0, NA, singlem_read_fraction),
singlem_read_fraction = if_else(singlem_read_fraction < mag_proportion, NA, singlem_read_fraction),
singlem_read_fraction = if_else(singlem_read_fraction > 1, 1, singlem_read_fraction)
) %>%
pivot_longer(-sample, names_to = "proportion", values_to = "value") %>%
mutate(
proportion = factor(
proportion,
levels = c("mag_proportion", "singlem_read_fraction")
)
) %>%
separate(col = "sample", into = c("sample", "tissue"), sep = "\\.", remove = FALSE) %>%
ggplot(aes(x = value, y = sample, color = proportion)) +
geom_line(aes(group = sample), color = "#f8a538") +
geom_point() +
scale_color_manual(name="Proportion",
breaks=c("mag_proportion","singlem_read_fraction"),
labels=c("Recovered","Estimated"),
values=c("#52e1e8", "#876b53"))+
facet_wrap(tissue~., scales = "free", labeller = labeller(tissue = c(cloaca="Cloaca",feces="Faeces"))) +
theme_minimal() +
labs(y = "Samples", x = "Prokaryotic fraction") +
scale_x_continuous(limits = c(0, 1)) +
theme(
axis.text.x = element_text( angle = 90, vjust = 0.5, hjust = 1, size = 6),
legend.position = "right"
)
data_stats %>%
mutate(
unmapped_reads = trimmed_reads - mapped_SceUnd - mapped_mags,
mag_proportion = mapped_mags / (mapped_mags + unmapped_reads),
singlem_read_fraction = singlem_read_fraction
) %>%
select(sample, mag_proportion, singlem_read_fraction) %>%
mutate(
mag_proportion = if_else(singlem_read_fraction == 0, 0, mag_proportion),
singlem_read_fraction = if_else(singlem_read_fraction == 0, NA, singlem_read_fraction),
singlem_read_fraction = if_else(singlem_read_fraction < mag_proportion, NA, singlem_read_fraction),
singlem_read_fraction = if_else(singlem_read_fraction > 1, 1, singlem_read_fraction)
) %>%
pivot_longer(-sample, names_to = "proportion", values_to = "value") %>%
mutate(
proportion = factor(
proportion,
levels = c("mag_proportion", "singlem_read_fraction")
)
) %>%
separate(col = "sample", into = c("sample", "tissue"), sep = "\\.", remove = FALSE) %>%
ggplot(aes(x = value, y = sample, color = proportion)) +
geom_line(aes(group = sample), color = "#f8a538") +
geom_point() +
scale_color_manual(name="Proportion",
breaks=c("mag_proportion","singlem_read_fraction"),
labels=c("Recovered","Estimated"),
values=c("#52e1e8", "#876b53"))+
facet_wrap(.~tissue, scales = "free", labeller = labeller(tissue = c(cloaca="Cloaca",feces="Faeces"))) +
theme_minimal() +
labs(y = "Samples", x = "Prokaryotic fraction") +
scale_x_continuous(limits = c(0, 1)) +
theme(
axis.text.x = element_text( angle = 90, vjust = 0.5, hjust = 1, size = 6),
legend.position = "right"
)
data_stats %>%
mutate(
unmapped_reads = trimmed_reads - mapped_SceUnd - mapped_mags,
mag_proportion = mapped_mags / (mapped_mags + unmapped_reads),
singlem_read_fraction = singlem_read_fraction
) %>%
select(sample, mag_proportion, singlem_read_fraction) %>%
mutate(
mag_proportion = if_else(singlem_read_fraction == 0, 0, mag_proportion),
singlem_read_fraction = if_else(singlem_read_fraction == 0, NA, singlem_read_fraction),
singlem_read_fraction = if_else(singlem_read_fraction < mag_proportion, NA, singlem_read_fraction),
singlem_read_fraction = if_else(singlem_read_fraction > 1, 1, singlem_read_fraction)
) %>%
pivot_longer(-sample, names_to = "proportion", values_to = "value") %>%
mutate(
proportion = factor(
proportion,
levels = c("mag_proportion", "singlem_read_fraction")
)
) %>%
separate(col = "sample", into = c("sample", "tissue"), sep = "\\.", remove = FALSE) %>%
ggplot(aes(x = value, y = sample, color = proportion)) +
geom_line(aes(group = sample), color = "#f8a538") +
geom_point() +
scale_color_manual(name="Proportion",
breaks=c("mag_proportion","singlem_read_fraction"),
labels=c("Recovered","Estimated"),
values=c("#52e1e8", "#876b53"))+
facet_wrap(tissue~., scales = "free", labeller = labeller(tissue = c(cloaca="Cloaca",feces="Faeces"))) +
theme_minimal() +
labs(y = "Samples", x = "Prokaryotic fraction") +
scale_x_continuous(limits = c(0, 1)) +
theme(
axis.text.x = element_text( angle = 90, vjust = 0.5, hjust = 1, size = 6),
legend.position = "right"
)
render_book(input = ".", output_format = "bookdown::gitbook", output_dir = "docs")
render_book(input = ".", output_format = "bookdown::gitbook", output_dir = "docs")
data_stats
data_stats$nonpareil_diversity
# phyloseq object considering structual zeros
phylo_samples <- sample_metadata %>%
column_to_rownames("sample") %>%
sample_data() # convert to phyloseq sample_data object
phylo_genome <- genome_counts %>%
column_to_rownames("genome") %>%
mutate_all(~ replace(., . == 0, 0.00001)) %>% # add pseudo counts to avoid structural zero issues (note this approach can be improved!)
otu_table(., taxa_are_rows = TRUE)
phylo_taxonomy <- genome_metadata %>%
filter(genome %in% rownames(phylo_genome)) %>% # remove structural zeros
mutate(genome2 = genome) %>% # create a pseudo genome name column
column_to_rownames("genome2") %>%
dplyr::select(domain, phylum, class, order, family, genus, species, genome) %>% # add an additional taxonomic level to ensure genome-level analysis (as no all genomes have species-level taxonomic assignments. Otherwise, ANCOMBC2 aggregates analyses per species)
as.matrix() %>%
tax_table() # convert to phyloseq tax_table object
physeq_genome_filtered <- phyloseq(phylo_genome, phylo_taxonomy, phylo_samples)
phyloseq_unfiltered <- phyloseq(phylo_genome, phylo_taxonomy, phylo_samples)
phyloseq <- phyloseq(phylo_genome, phylo_taxonomy, phylo_samples)
phyloseq
library(ANCOMBC)
phylo_samples
set.seed(1234) # set seed for reproducibility
ancom_rand_output <- ancombc2(
data = phyloseq,
assay_name = "counts",
tax_level = NULL, # change to agglomerate analysis to a higher taxonomic range
fix_formula = "type", # fixed variable(s)
rand_formula = "(1|individual)",
p_adj_method = "holm",
pseudo_sens = TRUE,
prv_cut = 0.10,
lib_cut = 1, # change it when working with genomes
s0_perc = 0.05,
group = NULL,
struc_zero = FALSE,
neg_lb = FALSE,
alpha = 0.05,
n_cl = 2,
verbose = TRUE,
global = FALSE,
pairwise = FALSE,
dunnet = FALSE,
trend = FALSE,
iter_control = list(tol = 1e-5, max_iter = 20, verbose = FALSE),
em_control = list(tol = 1e-5, max_iter = 100),
lme_control = lme4::lmerControl(),
mdfdr_control = list(fwer_ctrl_method = "holm", B = 100),
trend_control = NULL
)
# phyloseq object considering structual zeros
phylo_samples <- sample_metadata %>%
column_to_rownames("sample") %>%
sample_data() # convert to phyloseq sample_data object
phylo_counts <- read_counts %>%
column_to_rownames("genome") %>%
mutate_all(~ replace(., . == 0, 0.00001)) %>% # add pseudo counts to avoid structural zero issues (note this approach can be improved!)
otu_table(., taxa_are_rows = TRUE)
phylo_taxonomy <- genome_metadata %>%
filter(genome %in% rownames(phylo_genome)) %>% # remove structural zeros
mutate(genome2 = genome) %>% # create a pseudo genome name column
column_to_rownames("genome2") %>%
dplyr::select(domain, phylum, class, order, family, genus, species, genome) %>% # add an additional taxonomic level to ensure genome-level analysis (as no all genomes have species-level taxonomic assignments. Otherwise, ANCOMBC2 aggregates analyses per species)
as.matrix() %>%
tax_table() # convert to phyloseq tax_table object
phyloseq <- phyloseq(phylo_counts, phylo_taxonomy, phylo_samples)
phylo_counts
set.seed(1234) # set seed for reproducibility
ancom_rand_output <- ancombc2(
data = phyloseq,
assay_name = "counts",
tax_level = NULL, # change to agglomerate analysis to a higher taxonomic range
fix_formula = "type", # fixed variable(s)
rand_formula = "(1|individual)",
p_adj_method = "holm",
pseudo_sens = TRUE,
prv_cut = 0.10,
lib_cut = 1, # change it when working with genomes
s0_perc = 0.05,
group = NULL,
struc_zero = FALSE,
neg_lb = FALSE,
alpha = 0.05,
n_cl = 2,
verbose = TRUE,
global = FALSE,
pairwise = FALSE,
dunnet = FALSE,
trend = FALSE,
iter_control = list(tol = 1e-5, max_iter = 20, verbose = FALSE),
em_control = list(tol = 1e-5, max_iter = 100),
lme_control = lme4::lmerControl(),
mdfdr_control = list(fwer_ctrl_method = "holm", B = 100),
trend_control = NULL
)
set.seed(1234) # set seed for reproducibility
ancom_rand_output <- ancombc2(
data = phyloseq,
assay_name = "counts",
tax_level = NULL, # change to agglomerate analysis to a higher taxonomic range
fix_formula = "type", # fixed variable(s)
rand_formula = "(1|individual)",
p_adj_method = "holm",
pseudo_sens = TRUE,
prv_cut = 0.10,
lib_cut = 0,
s0_perc = 0.05,
group = NULL,
struc_zero = FALSE,
neg_lb = FALSE,
alpha = 0.05,
n_cl = 2,
verbose = TRUE,
global = FALSE,
pairwise = FALSE,
dunnet = FALSE,
trend = FALSE,
iter_control = list(tol = 1e-5, max_iter = 20, verbose = FALSE),
em_control = list(tol = 1e-5, max_iter = 100),
lme_control = lme4::lmerControl(),
mdfdr_control = list(fwer_ctrl_method = "holm", B = 100),
trend_control = NULL
)
render_book(input = ".", output_format = "bookdown::gitbook", output_dir = "docs")
render_book(input = ".", output_format = "bookdown::gitbook", output_dir = "docs")
render_book(input = ".", output_format = "bookdown::gitbook", output_dir = "docs")
render_book(input = ".", output_format = "bookdown::gitbook", output_dir = "docs")
render_book(input = ".", output_format = "bookdown::gitbook", output_dir = "docs")
data_stats
set.seed(1234) # set seed for reproducibility
ancom_rand_output <- ancombc2(
data = phyloseq,
assay_name = "counts",
tax_level = NULL, # change to agglomerate analysis to a higher taxonomic range
fix_formula = "type", # fixed variable(s)
rand_formula = "(1|individual)",
p_adj_method = "holm",
pseudo_sens = TRUE,
prv_cut = 0.10,
lib_cut = 0,
s0_perc = 0.05,
group = NULL,
struc_zero = FALSE,
neg_lb = FALSE,
alpha = 0.05,
n_cl = 2,
verbose = TRUE,
global = FALSE,
pairwise = FALSE,
dunnet = FALSE,
trend = FALSE,
iter_control = list(tol = 1e-5, max_iter = 20, verbose = FALSE),
em_control = list(tol = 1e-5, max_iter = 100),
lme_control = lme4::lmerControl(),
mdfdr_control = list(fwer_ctrl_method = "holm", B = 100),
trend_control = NULL
)
phyloseq
# Base
library(R.utils)
library(knitr)
library(tidyverse)
library(devtools)
# For tree handling
library(ape)
library(phyloseq)
library(phytools)
# For plotting
library(ggplot2)
library(ggrepel)
library(ggpubr)
library(ggnewscale)
library(gridExtra)
library(ggtreeExtra)
library(ggtree)
library(ggh4x)
# For statistics
library(spaa)
library(vegan)
library(Rtsne)
library(geiger)
library(hilldiv2)
library(distillR)
library(ANCOMBC)
library(lme4)
load("resources/data.Rdata")
# phyloseq object considering structual zeros
phylo_samples <- sample_metadata %>%
column_to_rownames("sample") %>%
sample_data() # convert to phyloseq sample_data object
phylo_genome <- genome_counts %>%
column_to_rownames("genome") %>%
mutate_all(~ replace(., . == 0, 0.00001)) %>% # add pseudo counts to avoid structural zero issues (note this approach can be improved!)
otu_table(., taxa_are_rows = TRUE)
phylo_taxonomy <- genome_metadata %>%
filter(genome %in% rownames(phylo_genome)) %>% # remove structural zeros
mutate(genome2 = genome) %>% # create a pseudo genome name column
column_to_rownames("genome2") %>%
dplyr::select(domain, phylum, class, order, family, genus, species, genome) %>% # add an additional taxonomic level to ensure genome-level analysis (as no all genomes have species-level taxonomic assignments. Otherwise, ANCOMBC2 aggregates analyses per species)
as.matrix() %>%
tax_table() # convert to phyloseq tax_table object
phyloseq <- phyloseq(phylo_genome, phylo_taxonomy, phylo_samples)
set.seed(1234) # set seed for reproducibility
ancom_rand_output <- ancombc2(
data = phyloseq,
assay_name = "counts",
tax_level = NULL, # change to agglomerate analysis to a higher taxonomic range
fix_formula = "type", # fixed variable(s)
rand_formula = "(1|individual)",
p_adj_method = "holm",
pseudo_sens = TRUE,
prv_cut = 0.10,
lib_cut = 0,
s0_perc = 0.05,
group = NULL,
struc_zero = FALSE,
neg_lb = FALSE,
alpha = 0.05,
n_cl = 2,
verbose = TRUE,
global = FALSE,
pairwise = FALSE,
dunnet = FALSE,
trend = FALSE,
iter_control = list(tol = 1e-5, max_iter = 20, verbose = FALSE),
em_control = list(tol = 1e-5, max_iter = 100),
lme_control = lme4::lmerControl(),
mdfdr_control = list(fwer_ctrl_method = "holm", B = 100),
trend_control = NULL
)
install.packages("renv")
renv::activate()
set.seed(1234) # set seed for reproducibility
ancom_rand_output <- ancombc2(
data = phyloseq,
assay_name = "counts",
tax_level = NULL, # change to agglomerate analysis to a higher taxonomic range
fix_formula = "type", # fixed variable(s)
rand_formula = "(1|individual)",
p_adj_method = "holm",
pseudo_sens = TRUE,
prv_cut = 0.10,
lib_cut = 0,
s0_perc = 0.05,
group = NULL,
struc_zero = FALSE,
neg_lb = FALSE,
alpha = 0.05,
n_cl = 2,
verbose = TRUE,
global = FALSE,
pairwise = FALSE,
dunnet = FALSE,
trend = FALSE,
iter_control = list(tol = 1e-5, max_iter = 20, verbose = FALSE),
em_control = list(tol = 1e-5, max_iter = 100),
lme_control = lme4::lmerControl(),
mdfdr_control = list(fwer_ctrl_method = "holm", B = 100),
trend_control = NULL
)
