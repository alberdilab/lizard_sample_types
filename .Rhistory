left_join(sample_metadata, by = join_by(sample == sample)) %>%
ggplot(aes(x=trait,y=sample,fill=gift)) +
geom_tile(colour="white", size=0.2)+
scale_fill_gradientn(colours=c("#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da"))+
facet_grid(type ~ ., scales="free",space="free")
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column(var="sample") %>%
pivot_longer(!sample,names_to="trait",values_to="gift") %>%
left_join(sample_metadata, by = join_by(sample == sample)) %>%
ggplot(aes(x=trait,y=sample,fill=gift)) +
geom_tile(colour="white", size=0.2)+
scale_fill_gradientn(colours=rev(c("#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da")))+
facet_grid(type ~ ., scales="free",space="free")
# Base
library(R.utils)
library(knitr)
library(tidyverse)
library(devtools)
# For tree handling
library(ape)
library(phyloseq)
library(phytools)
# For plotting
library(ggplot2)
library(ggrepel)
library(ggpubr)
library(ggnewscale)
library(gridExtra)
library(ggtreeExtra)
library(ggtree)
library(ggh4x)
# For statistics
library(spaa)
library(vegan)
library(Rtsne)
library(geiger)
library(hilldiv2)
library(distillR)
library(ANCOMBC)
library(lme4)
# Aggregate bundle-level GIFTs into the compound level
GIFTs_elements <- to.elements(genome_gifts, GIFT_db)
load("resources/data.Rdata")
# Aggregate bundle-level GIFTs into the compound level
GIFTs_elements <- to.elements(genome_gifts, GIFT_db)
GIFTs_elements_filtered <- GIFTs_elements[rownames(GIFTs_elements) %in% genome_counts$genome, ]
GIFTs_elements_filtered <- as.data.frame(GIFTs_elements_filtered) %>%
select_if(~ !is.numeric(.) || sum(.) != 0)
elements <- GIFTs_elements_filtered %>%
as.data.frame()
# Aggregate element-level GIFTs into the function level
GIFTs_functions <- to.functions(GIFTs_elements_filtered, GIFT_db)
functions <- GIFTs_functions %>%
as.data.frame()
# Aggregate function-level GIFTs into overall Biosynthesis, Degradation and Structural GIFTs
GIFTs_domains <- to.domains(GIFTs_functions, GIFT_db)
domains <- GIFTs_domains %>%
as.data.frame()
# Get community-weighed average GIFTs per sample
GIFTs_elements_community <- to.community(GIFTs_elements_filtered, genome_counts %>% column_to_rownames(., "genome") %>% tss(), GIFT_db)
GIFTs_functions_community <- to.community(GIFTs_functions, genome_counts %>% column_to_rownames(., "genome") %>% tss(), GIFT_db)
GIFTs_domains_community <- to.community(GIFTs_domains, genome_counts %>% column_to_rownames(., "genome") %>% tss(), GIFT_db)
GIFTs_elements_community
GIFTs_functions_community %>%
rownames_to_column("sample")
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample")
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.")
shapiro_test <- function(data, column) {
shapiro_results <- data %>%
group_by(type) %>%
summarise(p_value = shapiro.test(.[[column]])$p.value)
return(shapiro_results)
}
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
select(-individual) %>%
summarise(across(where(is.numeric), ~shapiro_test(GIFTs_functions_community, .col = .x), .names = "{.col}_shapiro_test"))
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
group_by(type) %>%
select(B01) %>%
summarise(p_value = shapiro.test(.)$p.value)
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
group_by(type) %>%
select(B01) %>%
ummarise(shapiro.test())
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
group_by(type) %>%
select(B01) %>%
summarise(shapiro.test())
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
group_by(type) %>%
select(B01) %>%
summarise(shapiro.test(.))
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
select(B01) %>%
summarise(shapiro.test(.))
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
select(B01)
class(GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
select(B01))
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
select(B01) %>%
hist()
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
select(individual,type,B01) %>%
lmer(B01 ~ type + (1|individual), data = .)
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
select(individual,type,B01) %>%
lmer(B01 ~ type + (1|individual), data = .) %>% summary()
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
select(individual,type,B01) %>%
lmerTest::lmer(B01 ~ type + (1 | individual), data = .) %>%
summary()
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
select(individual,type,B01) %>%
lmerTest::lmer(B01 ~ type + (1 | individual), data = .) %>%
broom.mixed::tidy()
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
select(individual,type,B01) %>%
lmerTest::lmer(B01 ~ type + (1 | individual), data = .) %>%
broom.mixed::tidy() %>%
filter(term="typefeces") %>%
select(p.value)
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
select(individual,type,B01) %>%
lmerTest::lmer(B01 ~ type + (1 | individual), data = .) %>%
broom.mixed::tidy() %>%
filter(term=="typefeces") %>%
select(p.value)
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
pivot_longer(-c(individual, type), names_to = "variable", values_to = "value") %>%
group_by(variable) %>%
mutate(model_result = list(lmerTest::lmer(value ~ type + (1 | individual)))) %>%
ungroup() %>%
summarise(p_value = map_dbl(model_result, ~tidy(.) %>% filter(term == "typefeces") %>% pull(p.value)))
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
pivot_longer(-c(individual, type), names_to = "variable", values_to = "value") %>%
group_by(variable) %>%
mutate(model_result = list(lmerTest::lmer(value ~ type + (1 | individual)))) %>%
ungroup() %>%
summarise(p_value = map_dbl(model_result, ~broom.mixed::tidy(.) %>% filter(term == "typefeces") %>% pull(p.value)))
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
pivot_longer(-c(individual, type), names_to = "variable", values_to = "value")
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
pivot_longer(-c(individual, type), names_to = "variable", values_to = "value") %>%
group_by(variable) %>%
mutate(model_result = list(lmerTest::lmer(value ~ type + (1 | individual))))
test <- GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
pivot_longer(-c(individual, type), names_to = "variable", values_to = "value") %>%
group_by(variable) %>%
mutate(model_result = list(lmerTest::lmer(value ~ type + (1 | individual))))
test
test %>% filter(variable="B01")
test %>% filter(variable=="B01")
test %>% filter(variable=="B01") %>% slice(1)
test %>% filter(variable=="B01") %>% slice(1) %>% select(model_result)
model_result
test <- GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
pivot_longer(-c(individual, type), names_to = "variable", values_to = "value") %>%
group_by(variable) %>%
mutate(model_result = list(lmerTest::lmer(value ~ type + (1 | individual)))) %>%
ungroup()
test %>% filter(variable=="B01") %>% slice(1) %>% select(model_result)
test %>% filter(variable=="B01") %>% slice(1) %>% select(model_result) %>% pull()
test %>% filter(variable=="B01") %>% slice(2) %>% select(model_result) %>% pull()
test %>% filter(variable=="B01") %>% slice(3) %>% select(model_result) %>% pull()
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
pivot_longer(-c(individual, type), names_to = "variable", values_to = "value") %>%
group_by(variable) %>%
mutate(model_result = list(lmerTest::lmer(value ~ type + (1 | individual)))) %>%
ungroup()
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
pivot_longer(-c(individual, type), names_to = "variable", values_to = "value") %>%
group_by(variable) %>%
mutate(model_result = list(lmerTest::lmer(value ~ type + (1 | individual)))) %>%
ungroup() %>%
select(variable,model_result) %>%
unique()
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
pivot_longer(-c(individual, type), names_to = "variable", values_to = "value") %>%
group_by(variable) %>%
mutate(model_result = list(lmerTest::lmer(value ~ type + (1 | individual)))) %>%
ungroup() %>%
select(variable,model_result) %>%
unique() %>%
mutate(p_value = map_dbl(model_result, ~broom.mixed::tidy(.) %>% filter(term == "typefeces") %>% pull(p.value)))
test <- GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
pivot_longer(-c(individual, type), names_to = "variable", values_to = "value") %>%
group_by(variable) %>%
mutate(model_result = list(lmerTest::lmer(value ~ type + (1 | individual)))) %>%
ungroup() %>%
select(variable,model_result) %>%
unique() %>%
mutate(p_value = map_dbl(model_result, ~broom.mixed::tidy(.) %>% filter(term == "typefeces") %>% pull(p.value)))
test
test %>% slice(1) %>% select(model_result) %>% pull() %>% summarise()
test %>% slice(1) %>% select(model_result) %>% pull()
test %>% slice(1) %>% select(model_result) %>% pull() %>% unlist()  %>% summarise()
test %>% slice(1) %>% select(model_result) %>% pull() %>% flatten()  %>% summarise()
test %>% slice(1) %>% select(model_result) %>% pull() %>% unlist()
test %>% slice(1) %>% select(model_result) %>% pull() %>% unlist() %>% unlist()
resuts<- test %>% slice(1) %>% select(model_result) %>% pull() %>% unlist()
resuts
resuts[[1]]
resuts[[1]] %>% summary()
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
pivot_longer(-c(individual, type), names_to = "variable", values_to = "value") %>%
group_by(variable) %>%
mutate(model_result = list(lmerTest::lmer(value ~ type + (1 | individual)))) %>%
ungroup() %>%
select(variable,model_result) %>%
unique() %>%
mutate(p_value = map_dbl(model_result, ~broom.mixed::tidy(.) %>% filter(term == "typefeces") %>% pull(p.value))) %>%
mutate(p_value_adj = p.adjust(p_value, method = "bonferroni"))
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
pivot_longer(-c(individual, type), names_to = "variable", values_to = "value") %>%
group_by(variable) %>%
mutate(model_result = list(lmerTest::lmer(value ~ type + (1 | individual)))) %>%
ungroup() %>%
select(variable,model_result) %>%
unique() %>%
mutate(p_value = map_dbl(model_result, ~broom.mixed::tidy(.) %>% filter(term == "typefeces") %>% pull(p.value))) %>%
mutate(p_value_adj = p.adjust(p_value, method = "bonferroni")) %>%
select(variable, p_value_adj) %>%
tt()
library(tinytable)
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
pivot_longer(-c(individual, type), names_to = "variable", values_to = "value") %>%
group_by(variable) %>%
mutate(model_result = list(lmerTest::lmer(value ~ type + (1 | individual)))) %>%
ungroup() %>%
select(variable,model_result) %>%
unique() %>%
mutate(p_value = map_dbl(model_result, ~broom.mixed::tidy(.) %>% filter(term == "typefeces") %>% pull(p.value))) %>%
mutate(p_value_adj = p.adjust(p_value, method = "bonferroni")) %>%
select(variable, p_value_adj) %>%
tt()
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
pivot_longer(-c(individual, type), names_to = "variable", values_to = "value")
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
pivot_longer(-c(individual, type), names_to = "trait", values_to = "value") %>%
group_by(trait) %>%
mutate(model_result = list(lmerTest::lmer(value ~ type + (1 | individual)))) %>%
ungroup() %>%
select(trait,model_result) %>%
unique() %>%
mutate(p_value = map_dbl(model_result, ~broom.mixed::tidy(.) %>% filter(term == "typefeces") %>% pull(p.value))) %>%
mutate(p_value_adj = p.adjust(p_value, method = "bonferroni")) %>%
select(trait, p_value_adj) %>%
tt()
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
pivot_longer(-c(individual, type), names_to = "trait", values_to = "value") %>%
ggplot(aes(x=value,y=type,group=individual))+
geom_boxplot() +
facet_grid(variable ~ .)
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
pivot_longer(-c(individual, type), names_to = "trait", values_to = "value") %>%
ggplot(aes(x=value,y=type,group=individual))+
geom_boxplot() +
facet_grid(trait ~ .)
,GIFTs_functions_community %>%
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
pivot_longer(-c(individual, type), names_to = "trait", values_to = "value") %>%
ggplot(aes(x=value, y=type, group=individual)) +
geom_boxplot() +
facet_grid(trait ~ ., space="free", scales="free")
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
pivot_longer(-c(individual, type), names_to = "trait", values_to = "value") %>%
ggplot(aes(x=value, y=type, group=type)) +
geom_boxplot() +
facet_grid(trait ~ ., space="free", scales="free")
GIFTs_elements_community %>%
as.data.frame() %>%
rownames_to_column(var="sample") %>%
pivot_longer(!sample,names_to="trait",values_to="gift") %>%
left_join(sample_metadata, by = join_by(sample == sample)) %>%
ggplot(aes(x=trait,y=sample,fill=gift)) +
geom_tile(colour="white", size=0.2)+
scale_fill_gradientn(colours=rev(c("#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da")))+
facet_grid(type ~ ., scales="free",space="free")
GIFTs_elements_community %>%
as.data.frame() %>%
rownames_to_column(var="sample") %>%
pivot_longer(!sample,names_to="trait",values_to="gift") %>%
left_join(sample_metadata, by = join_by(sample == sample))
GIFTs_elements_community %>%
as.data.frame() %>%
rownames_to_column(var="sample") %>%
pivot_longer(!sample,names_to="trait",values_to="gift") %>%
left_join(sample_metadata, by = join_by(sample == sample)) %>%
mutate(functionid = substr(trait, 1, 3)) %>%
ggplot(aes(x=trait,y=sample,fill=gift)) +
geom_tile(colour="white", size=0.2)+
scale_fill_gradientn(colours=rev(c("#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da")))+
facet_grid(type ~ trait, scales="free",space="free")
GIFTs_elements_community %>%
as.data.frame() %>%
rownames_to_column(var="sample") %>%
pivot_longer(!sample,names_to="trait",values_to="gift") %>%
left_join(sample_metadata, by = join_by(sample == sample)) %>%
mutate(functionid = substr(trait, 1, 3))
GIFTs_elements_community %>%
as.data.frame() %>%
rownames_to_column(var="sample") %>%
pivot_longer(!sample,names_to="trait",values_to="gift") %>%
left_join(sample_metadata, by = join_by(sample == sample)) %>%
mutate(functionid = substr(trait, 1, 3)) %>%
ggplot(aes(x=trait,y=sample,fill=gift)) +
geom_tile(colour="white", size=0.2)+
scale_fill_gradientn(colours=rev(c("#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da")))+
facet_grid(type ~ functionid, scales="free", space="free")
GIFTs_elements_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
pivot_longer(-c(individual, type), names_to = "trait", values_to = "value") %>%
group_by(trait) %>%
mutate(model_result = list(lmerTest::lmer(value ~ type + (1 | individual)))) %>%
ungroup() %>%
select(trait,model_result) %>%
unique() %>%
mutate(p_value = map_dbl(model_result, ~broom.mixed::tidy(.) %>% filter(term == "typefeces") %>% pull(p.value))) %>%
mutate(p_value_adj = p.adjust(p_value, method = "bonferroni")) %>%
select(trait, p_value_adj) %>%
tt()
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
pivot_longer(-c(individual, type), names_to = "trait", values_to = "value") %>%
group_by(trait) %>%
mutate(model_result = list(lmerTest::lmer(value ~ type + (1 | individual)))) %>%
ungroup() %>%
select(trait,model_result) %>%
unique() %>%
mutate(p_value = map_dbl(model_result, ~broom.mixed::tidy(.) %>% filter(term == "typefeces") %>% pull(p.value))) %>%
mutate(p_value_adj = p.adjust(p_value, method = "bonferroni")) %>%
select(trait, p_value_adj) %>%
tt()
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
pivot_longer(-c(individual, type), names_to = "trait", values_to = "value") %>%
ggplot(aes(x=value, y=type, group=type)) +
geom_boxplot() +
facet_grid(trait ~ ., space="free", scales="free")
GIFTs_functions_community %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
separate(sample, into = c("individual", "type"), sep = "\\.") %>%
pivot_longer(-c(individual, type), names_to = "trait", values_to = "value") %>%
group_by(trait) %>%
mutate(model_result = list(lmerTest::lmer(value ~ type + (1 | individual)))) %>%
ungroup() %>%
select(trait,model_result) %>%
unique() %>%
mutate(p_value = map_dbl(model_result, ~broom.mixed::tidy(.) %>% filter(term == "typefeces") %>% pull(p.value))) %>%
mutate(p_value_adj = p.adjust(p_value, method = "bonferroni")) %>%
select(trait, p_value_adj) %>%
tt()
beta_q0n
beta_q0n <- genome_counts_filt %>%
column_to_rownames(., "genome") %>%
hillpair(., q = 0)
beta_q1n <- genome_counts_filt %>%
column_to_rownames(., "genome") %>%
hillpair(., q = 1)
beta_q1p <- genome_counts_filt %>%
column_to_rownames(., "genome") %>%
hillpair(., q = 1, tree = genome_tree)
beta_q1f <- genome_counts_filt %>%
column_to_rownames(., "genome") %>%
hillpair(., q = 1, dist = dist)
class(beta_q0n)
beta_q0n
beta_q0n$C
class(beta_q0n$C)
betadisper(beta_q0n$C)
sample_metadata$type
beta_q0n <- betadisper(beta_q0n$C, sample_metadata$type)
beta_q0n
summary(betadisper(beta_q0n$C, sample_metadata$type))
betadisper(beta_q0n$S, sample_metadata$type)
betadisper(beta_q0n$U, sample_metadata$type)
beta_q0n
beta_q0n <- genome_counts_filt %>%
column_to_rownames(., "genome") %>%
hillpair(., q = 0)
betadisper(beta_q0n$U, sample_metadata$type)
beta_q1n <- genome_counts_filt %>%
column_to_rownames(., "genome") %>%
hillpair(., q = 1)
betadisper(beta_q1n$U, sample_metadata$type)
disper_q0n <- betadisper(beta_q0n$U, sample_metadata$type)
anova(disper_q0n)
adonis2(beta_q0n$U)
adonis2
betadisper(beta_q1n$U, sample_metadata$type)
betadisper(beta_q1n$X, sample_metadata$type)
betadisper(beta_q1n$C, sample_metadata$type)
betadisper(beta_q1n$S, sample_metadata$type)
betadisper(beta_q0n$S, sample_metadata$type)
betadisper(beta_q1n$C, sample_metadata$type)
betadisper(beta_q1n$S, sample_metadata$type)
