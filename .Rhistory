xlab("Genome") +
ylab("log2FoldChange") +
guides(col = guide_legend("Phylum"))
render_book(input = ".", output_format = "bookdown::gitbook", output_dir = "docs")
load("resources/data.Rdata")
data_stats
data_stats$raw_reads %>% sum()
# Base
library(R.utils)
library(knitr)
library(tidyverse)
library(devtools)
# For tree handling
library(ape)
library(phyloseq)
library(phytools)
# For plotting
library(ggplot2)
library(ggrepel)
library(ggpubr)
library(ggnewscale)
library(gridExtra)
library(ggtreeExtra)
library(ggtree)
library(ggh4x)
# For statistics
library(spaa)
library(vegan)
library(Rtsne)
library(geiger)
library(hilldiv2)
library(distillR)
library(ANCOMBC)
library(lme4)
data_stats$raw_reads %>% sum()
data_stats$raw_reads %>% mean()
data_stats$raw_reads %>% sd()
genome_metadata
genome_metadata$contamination %>% mean()
genome_metadata$contamination %>% sd()
genome_metadata$completeness %>% mean()
genome_metadata$completeness %>% sd()
data_stats$mapped_mags %>% mean()
data_stats$mapped_mags %>% sd()
data_stats$mapped_mags / data_stats$trimmed_reads %>% mean()
data_stats$mapped_mags / data_stats$trimmed_reads %>% sd()
data_stats$trimmed_reads
data_stats$mapped_mags / (data_stats$raw_reads - data_stats$trimmed_reads) %>% mean()
data_stats$raw_reads - data_stats$trimmed_reads
(data_stats$mapped_mags / data_stats$trimmed_reads)  %>% mean()
data_stats %>%
mutate(mapped_perc=mapped_mags/trimmed_reads) %>%
summarise(mean=mean(mapped_perc),sd=sd(mapped_perc))
data_stats
data_stats %>%
mutate(mapped_perc=mapped_mags/trimmed_reads) %>%
left_join(., sample_metadata, by = join_by(sample == sample))
sample_metadata
data_stats %>%
mutate(mapped_perc=mapped_mags/trimmed_reads) %>%
left_join(., sample_metadata, by = join_by(sample == sample)) %>%
group_by(type) %>%
summarise(mean=mean(mapped_perc),sd=sd(mapped_perc))
data_stats %>%
mutate(
unmapped_reads = trimmed_reads - mapped_SceUnd - mapped_mags,
mag_proportion = mapped_mags / (mapped_mags + unmapped_reads),
singlem_read_fraction = singlem_read_fraction
) %>%
select(sample, mag_proportion, singlem_read_fraction) %>%
mutate(
mag_proportion = if_else(singlem_read_fraction == 0, 0, mag_proportion),
singlem_read_fraction = if_else(singlem_read_fraction == 0, NA, singlem_read_fraction),
singlem_read_fraction = if_else(singlem_read_fraction < mag_proportion, NA, singlem_read_fraction),
singlem_read_fraction = if_else(singlem_read_fraction > 1, 1, singlem_read_fraction)
) %>%
pivot_longer(-sample, names_to = "proportion", values_to = "value") %>%
mutate(
proportion = factor(
proportion,
levels = c("mag_proportion", "singlem_read_fraction")
)
) %>%
separate(col = "sample", into = c("sample", "tissue"), sep = "\\.", remove = FALSE) %>%
ggplot(aes(x = value, y = sample, color = proportion)) +
geom_line(aes(group = sample), color = "#f8a538") +
geom_point() +
scale_color_manual(name="Proportion",
breaks=c("mag_proportion","singlem_read_fraction"),
labels=c("Recovered","Estimated"),
values=c("#52e1e8", "#876b53"))+
facet_wrap(tissue~., scales = "free", labeller = labeller(tissue = c(cloaca="Cloaca",feces="Faeces"))) +
theme_minimal() +
labs(y = "Samples", x = "Prokaryotic fraction") +
scale_x_continuous(limits = c(0, 1)) +
theme(
axis.text.x = element_text( angle = 90, vjust = 0.5, hjust = 1, size = 6),
legend.position = "right"
)
phylum_summary <- genome_counts_filt %>%
mutate_at(vars(-genome),~./sum(.)) %>% #apply TSS nornalisation
pivot_longer(-genome, names_to = "sample", values_to = "count") %>% #reduce to minimum number of columns
left_join(sample_metadata, by = join_by(sample == sample)) %>% #append sample metadata
left_join(., genome_metadata, by = join_by(genome == genome)) %>% #append genome metadata
group_by(sample,phylum)) %>%
phylum_summary <- genome_counts_filt %>%
mutate_at(vars(-genome),~./sum(.)) %>% #apply TSS nornalisation
pivot_longer(-genome, names_to = "sample", values_to = "count") %>%
left_join(sample_metadata, by = join_by(sample == sample)) %>%
left_join(genome_metadata, by = join_by(genome == genome)) %>%
group_by(sample,phylum) %>%
summarise(relabun=sum(count))
phylum_summary
phylum_arrange <- phylum_summary %>%
group_by(phylum) %>%
summarise(mean=sum(relabun)) %>%
arrange(-mean) %>%
select(phylum) %>%
pull()
phylum_arrange
phylum_summary %>%
left_join(genome_metadata %>% select(genus,phylum) %>% unique(),by=join_by(genus==genus)) %>%
filter(phylum %in% phylum_arrange) %>%
mutate(genus=factor(genus,levels=rev(phylum_arrange))) %>%
ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum)) +
#scale_color_manual(values=c("#F4D9AE","#DE9E46","#2D8077","#CD4F41")) +
geom_boxplot() +
geom_jitter(alpha=0.5) +
theme_minimal()
phylum_summary %>%
left_join(genome_metadata %>% select(genus,phylum) %>% unique(),by=join_by(genus==genus)) %>%
filter(phylum %in% phylum_arrange) %>%
mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %>%
ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum)) +
#scale_color_manual(values=c("#F4D9AE","#DE9E46","#2D8077","#CD4F41")) +
geom_boxplot() +
geom_jitter(alpha=0.5) +
theme_minimal()
phylum_summary %>%
left_join(genome_metadata %>% select(genome,phylum) %>% unique(),by=join_by(phylum==phylum)) %>%
filter(phylum %in% phylum_arrange) %>%
mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %>%
ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum)) +
#scale_color_manual(values=c("#F4D9AE","#DE9E46","#2D8077","#CD4F41")) +
geom_boxplot() +
geom_jitter(alpha=0.5) +
theme_minimal()รง
phylum_summary %>%
left_join(genome_metadata %>% select(genome,phylum) %>% unique(),by=join_by(phylum==phylum)) %>%
filter(phylum %in% phylum_arrange) %>%
mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %>%
ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum)) +
#scale_color_manual(values=c("#F4D9AE","#DE9E46","#2D8077","#CD4F41")) +
geom_boxplot() +
geom_jitter(alpha=0.5) +
theme_minimal()
phylum_summary
phylum_summary %>% print(n=100)
phylum_summary %>% filter(phylum =="p__Bacteroidota")
genome_metadata %>% select(genome,phylum) %>% unique()
phylum_summary %>%
left_join(genome_metadata %>% select(genome,phylum) %>% unique(),by=join_by(phylum==phylum)) %>%
filter(phylum %in% phylum_arrange) %>%
mutate(phylum=factor(phylum,levels=rev(phylum_arrange)))
phylum_summary %>%
left_join(genome_metadata %>% select(genome,phylum) %>% unique(),by=join_by(phylum==phylum))
phylum_summary
phylum_summary %>%
filter(phylum %in% phylum_arrange) %>%
mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %>%
ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum)) +
#scale_color_manual(values=c("#F4D9AE","#DE9E46","#2D8077","#CD4F41")) +
geom_boxplot() +
geom_jitter(alpha=0.5) +
theme_minimal()
phylum_summary %>%
group_by(phylum) %>%
summarise(mean=sum(relabun))
phylum_summary
phylum_arrange <- phylum_summary %>%
group_by(phylum) %>%
summarise(mean=mean(relabun)) %>%
arrange(-mean) %>%
select(phylum) %>%
pull()
phylum_arrange
phylum_summary <- genome_counts_filt %>%
mutate_at(vars(-genome),~./sum(.)) %>% #apply TSS nornalisation
pivot_longer(-genome, names_to = "sample", values_to = "count") %>%
left_join(sample_metadata, by = join_by(sample == sample)) %>%
left_join(genome_metadata, by = join_by(genome == genome)) %>%
group_by(sample,phylum) %>%
summarise(relabun=sum(count))
phylum_arrange <- phylum_summary %>%
group_by(phylum) %>%
summarise(mean=mean(relabun)) %>%
arrange(-mean) %>%
select(phylum) %>%
pull()
phylum_summary %>%
filter(phylum %in% phylum_arrange) %>%
mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %>%
ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum)) +
#scale_color_manual(values=c("#F4D9AE","#DE9E46","#2D8077","#CD4F41")) +
geom_boxplot() +
geom_jitter(alpha=0.5) +
theme_minimal()
phylum_summary %>%
group_by(phylum) %>%
summarise(mean=mean(relabun))
phylum_summary %>%
filter(phylum %in% phylum_arrange) %>%
mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %>%
ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum)) +
#scale_color_manual(values=c("#F4D9AE","#DE9E46","#2D8077","#CD4F41")) +
#geom_boxplot() +
geom_jitter(alpha=0.5) +
theme_minimal()
phylum_summary %>%
group_by(phylum) %>%
summarise(mean=mean(relabun))
genus_summary <- genome_counts_filt %>%
mutate_at(vars(-genome),~./sum(.)) %>% #apply TSS nornalisation
pivot_longer(-genome, names_to = "sample", values_to = "count") %>% #reduce to minimum number of columns
left_join(sample_metadata, by = join_by(sample == sample)) %>% #append sample metadata
left_join(., genome_metadata, by = join_by(genome == genome)) %>% #append genome metadata
group_by(sample,genus) %>%
summarise(relabun=sum(count))
genus_summary
genus_arrange <- genus_summary %>%
group_by(genus) %>%
summarise(mean=sum(relabun)) %>%
arrange(-mean) %>%
select(genus) %>%
pull()
genus_arrange
genus_summary %>%
left_join(genome_metadata %>% select(genus,phylum) %>% unique(),by=join_by(genus==genus)) %>%
filter(genus %in% genus_arrange[1:20]) %>%
mutate(genus=factor(genus,levels=rev(genus_arrange[1:20]))) %>%
ggplot(aes(x=relabun, y=genus, group=genus, color=order)) +
scale_color_manual(values=c("#F4D9AE","#DE9E46","#2D8077","#CD4F41")) +
geom_boxplot() +
geom_jitter(alpha=0.5) +
theme_minimal()
genus_summary %>%
left_join(genome_metadata %>% select(genus,phylum) %>% unique(),by=join_by(genus==genus)) %>%
filter(genus %in% genus_arrange[1:20]) %>%
mutate(genus=factor(genus,levels=rev(genus_arrange[1:20]))) %>%
ggplot(aes(x=relabun, y=genus, group=genus, color=phyum)) +
scale_color_manual(values=c("#F4D9AE","#DE9E46","#2D8077","#CD4F41")) +
geom_boxplot() +
geom_jitter(alpha=0.5) +
theme_minimal()
genus_summary %>%
left_join(genome_metadata %>% select(genus,phylum) %>% unique(),by=join_by(genus==genus)) %>%
filter(genus %in% genus_arrange[1:20]) %>%
mutate(genus=factor(genus,levels=rev(genus_arrange[1:20]))) %>%
ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) +
scale_color_manual(values=c("#F4D9AE","#DE9E46","#2D8077","#CD4F41")) +
geom_boxplot() +
geom_jitter(alpha=0.5) +
theme_minimal()
genus_summary %>%
left_join(genome_metadata %>% select(genus,phylum) %>% unique(),by=join_by(genus==genus)) %>%
filter(genus %in% genus_arrange[1:20]) %>%
mutate(genus=factor(genus,levels=rev(genus_arrange[1:20]))) %>%
ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) +
#scale_color_manual(values=c("#F4D9AE","#DE9E46","#2D8077","#CD4F41")) +
geom_boxplot() +
geom_jitter(alpha=0.5) +
theme_minimal()
genus_summary %>%
left_join(genome_metadata %>% select(genus,phylum) %>% unique(),by=join_by(genus==genus)) %>%
filter(genus %in% genus_arrange[1:20]) %>%
mutate(genus=factor(genus,levels=rev(genus_arrange[1:20]))) %>%
ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) +
scale_color_manual(values=phylum_colors) +
geom_boxplot() +
geom_jitter(alpha=0.5) +
theme_minimal()
genus_summary %>%
left_join(genome_metadata %>% select(genus,phylum) %>% unique(),by=join_by(genus==genus)) %>%
filter(genus %in% genus_arrange[1:20]) %>%
mutate(genus=factor(genus,levels=rev(genus_arrange[1:20]))) %>%
ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) +
scale_color_manual(values=phylum_colors) +
#geom_boxplot() +
geom_jitter(alpha=0.5) +
theme_minimal()
genus_summary %>%
left_join(genome_metadata %>% select(genus,phylum) %>% unique(),by=join_by(genus==genus)) %>%
filter(genus %in% genus_arrange[1:20]) %>%
mutate(genus=factor(genus,levels=rev(genus_arrange[1:20]))) %>%
ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) +
scale_color_manual(values=phylum_colors) +
#geom_boxplot() +
geom_jitter(alpha=0.5) +
facet_grid(.~type)+
theme_minimal()
genus_summary
genus_summary %>%
left_join(genome_metadata %>% select(genus,phylum) %>% unique(),by=join_by(genus==genus)) %>%
left_join(sample_metadata,by=join_by(sample==sample)) %>%
filter(genus %in% genus_arrange[1:20]) %>%
mutate(genus=factor(genus,levels=rev(genus_arrange[1:20]))) %>%
ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) +
scale_color_manual(values=phylum_colors) +
#geom_boxplot() +
geom_jitter(alpha=0.5) +
facet_grid(.~type)+
theme_minimal()
# Aggregate basal GIFT into elements
function_table <- genome_gifts %>%
to.elements(., GIFT_db)
# Generate  basal tree
function_tree <- force.ultrametric(genome_tree, method="extend") %>%
ggtree(., size = 0.3)
#Add phylum colors next to the tree tips
function_tree <- gheatmap(function_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE) +
scale_fill_manual(values=phylum_colors) +
labs(fill="Phylum")
# Generate the phylum color heatmap
phylum_heatmap <- read_tsv("https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv") %>%
right_join(genome_metadata, by=join_by(phylum == phylum)) %>%
arrange(match(genome, genome_tree$tip.label)) %>%
select(genome,phylum) %>%
mutate(phylum = factor(phylum, levels = unique(phylum))) %>%
column_to_rownames(var = "genome")
# Generate  basal tree
circular_tree <- force.ultrametric(genome_tree, method="extend") %>% # extend to ultrametric for the sake of visualisation
ggtree(., layout="fan", open.angle=10, size=0.5)
# Add phylum ring
circular_tree <- gheatmap(circular_tree, phylum_heatmap, offset=0.55, width=0.1, colnames=FALSE) +
scale_fill_manual(values=phylum_colors) +
geom_tiplab2(size=1, hjust=-0.1) +
theme(legend.position = "none", plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0))
# Flush color scale to enable a new color scheme in the next ring
circular_tree <- circular_tree + new_scale_fill()
# Add completeness ring
circular_tree <- circular_tree +
new_scale_fill() +
scale_fill_gradient(low = "#d1f4ba", high = "#f4baba") +
geom_fruit(
data=genome_metadata,
geom=geom_bar,
mapping = aes(x=completeness, y=genome, fill=contamination),
offset = 0.55,
orientation="y",
stat="identity")
# Add genome-size ring
circular_tree <-  circular_tree +
new_scale_fill() +
scale_fill_manual(values = "#cccccc") +
geom_fruit(
data=genome_metadata,
geom=geom_bar,
mapping = aes(x=length, y=genome),
offset = 0.05,
orientation="y",
stat="identity")
# Add text
circular_tree <-  circular_tree +
annotate('text', x=2.7, y=0, label='            Phylum', family='arial', size=3.5) +
annotate('text', x=3.1, y=0, label='                         Genome quality', family='arial', size=3.5) +
annotate('text', x=3.5, y=0, label='                     Genome size', family='arial', size=3.5)
#Plot circular tree
circular_tree %>% open_tree(30) %>% rotate_tree(90)
#Generate quality biplot
genome_biplot <- genome_metadata %>%
select(c(genome,domain,phylum,completeness,contamination,length)) %>%
arrange(match(genome, rev(genome_tree$tip.label))) %>% #sort MAGs according to phylogenetic tree
ggplot(aes(x=completeness,y=contamination,size=length,color=phylum)) +
geom_point(alpha=0.7) +
ylim(c(10,0)) +
scale_color_manual(values=phylum_colors) +
labs(y= "Contamination", x = "Completeness") +
theme_classic() +
theme(legend.position = "none")
#Generate contamination boxplot
genome_contamination <- genome_metadata %>%
ggplot(aes(y=contamination)) +
ylim(c(10,0)) +
geom_boxplot(colour = "#999999", fill="#cccccc") +
theme_void() +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
plot.margin = unit(c(0, 0, 0.40, 0),"inches")) #add bottom-margin (top, right, bottom, left)
#Generate completeness boxplot
genome_completeness <- genome_metadata %>%
ggplot(aes(x=completeness)) +
xlim(c(50,100)) +
geom_boxplot(colour = "#999999", fill="#cccccc") +
theme_void() +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
plot.margin = unit(c(0, 0, 0, 0.50),"inches")) #add left-margin (top, right, bottom, left)
#Render composite figure
grid.arrange(grobs = list(genome_completeness,genome_biplot,genome_contamination),
layout_matrix = rbind(c(1,1,1,1,1,1,1,1,1,1,1,4),
c(2,2,2,2,2,2,2,2,2,2,2,3),
c(2,2,2,2,2,2,2,2,2,2,2,3),
c(2,2,2,2,2,2,2,2,2,2,2,3),
c(2,2,2,2,2,2,2,2,2,2,2,3),
c(2,2,2,2,2,2,2,2,2,2,2,3),
c(2,2,2,2,2,2,2,2,2,2,2,3),
c(2,2,2,2,2,2,2,2,2,2,2,3),
c(2,2,2,2,2,2,2,2,2,2,2,3),
c(2,2,2,2,2,2,2,2,2,2,2,3),
c(2,2,2,2,2,2,2,2,2,2,2,3),
c(2,2,2,2,2,2,2,2,2,2,2,3)))
# Aggregate basal GIFT into elements
function_table <- genome_gifts %>%
to.elements(., GIFT_db)
# Generate  basal tree
function_tree <- force.ultrametric(genome_tree, method="extend") %>%
ggtree(., size = 0.3)
#Add phylum colors next to the tree tips
function_tree <- gheatmap(function_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE) +
scale_fill_manual(values=phylum_colors) +
labs(fill="Phylum")
#Reset fill scale to use a different colour profile in the heatmap
function_tree <- function_tree + new_scale_fill()
#Add functions heatmap
function_tree <- gheatmap(function_tree, function_table, offset=0.5, width=3.5, colnames=FALSE) +
vexpand(.08) +
coord_cartesian(clip = "off") +
scale_fill_gradient(low = "#f4f4f4", high = "steelblue", na.value="white") +
labs(fill="GIFT")
#Reset fill scale to use a different colour profile in the heatmap
function_tree <- function_tree + new_scale_fill()
# Add completeness barplots
function_tree <- function_tree +
geom_fruit(data=genome_metadata,
geom=geom_bar,
grid.params=list(axis="x", text.size=2, nbreak = 1),
axis.params=list(vline=TRUE),
mapping = aes(x=length, y=genome, fill=completeness),
offset = 3.8,
orientation="y",
stat="identity") +
scale_fill_gradient(low = "#cf8888", high = "#a2cc87") +
labs(fill="Genome\ncompleteness")
function_tree
genus_summary %>%
left_join(genome_metadata %>% select(genus,phylum) %>% unique(),by=join_by(genus==genus)) %>%
left_join(sample_metadata,by=join_by(sample==sample)) %>%
filter(genus %in% genus_arrange[1:20]) %>%
mutate(genus=factor(genus,levels=rev(genus_arrange[1:20]))) %>%
ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) +
scale_color_manual(values=phylum_colors) +
#geom_boxplot() +
geom_jitter(alpha=0.5) +
facet_grid(.~type)+
theme_minimal()
genus_summary %>%
left_join(genome_metadata %>% select(genus,phylum) %>% unique(),by=join_by(genus==genus)) %>%
left_join(sample_metadata,by=join_by(sample==sample)) %>%
filter(genus %in% genus_arrange[1:20]) %>%
mutate(genus=factor(genus,levels=rev(genus_arrange[1:20]))) %>%
ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) +
scale_color_manual(values=phylum_colors[-5]) +
#geom_boxplot() +
geom_jitter(alpha=0.5) +
facet_grid(.~type)+
theme_minimal()
genus_summary %>%
left_join(genome_metadata %>% select(genus,phylum) %>% unique(),by=join_by(genus==genus)) %>%
left_join(sample_metadata,by=join_by(sample==sample)) %>%
filter(genus %in% genus_arrange[1:20]) %>%
mutate(genus=factor(genus,levels=rev(genus_arrange[1:20]))) %>%
ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) +
scale_color_manual(values=phylum_colors[-4]) +
#geom_boxplot() +
geom_jitter(alpha=0.5) +
facet_grid(.~type)+
theme_minimal()
phylum_colors
genus_summary <- genome_counts_filt %>%
mutate_at(vars(-genome),~./sum(.)) %>% #apply TSS nornalisation
pivot_longer(-genome, names_to = "sample", values_to = "count") %>% #reduce to minimum number of columns
left_join(sample_metadata, by = join_by(sample == sample)) %>% #append sample metadata
left_join(., genome_metadata, by = join_by(genome == genome)) %>% #append genome metadata
group_by(sample,genus) %>%
summarise(relabun=sum(count))
genus_arrange <- genus_summary %>%
group_by(genus) %>%
summarise(mean=sum(relabun)) %>%
arrange(-mean) %>%
select(genus) %>%
pull()
genus_summary %>%
left_join(genome_metadata %>% select(genus,phylum) %>% unique(),by=join_by(genus==genus)) %>%
left_join(sample_metadata,by=join_by(sample==sample)) %>%
filter(genus %in% genus_arrange[1:20]) %>%
mutate(genus=factor(genus,levels=rev(genus_arrange[1:20]))) %>%
ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) +
scale_color_manual(values=phylum_colors[-8]) +
#geom_boxplot() +
geom_jitter(alpha=0.5) +
facet_grid(.~type)+
theme_minimal()
